// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.0
//
// <auto-generated>
//
// Generated from file `Printer.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//


using _System = global::System;

#pragma warning disable 1591

namespace IceCompactId
{
}

namespace Online
{
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    [_System.Serializable]
    public partial struct Vector3
    {
        #region Slice data members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        public float x;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        public float y;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        public float z;

        #endregion

        #region Constructor

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        public Vector3(float x, float y, float z)
        {
            this.x = x;
            this.y = y;
            this.z = z;
        }

        #endregion

        #region Object members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        public override int GetHashCode()
        {
            int h_ = 5381;
            IceInternal.HashUtil.hashAdd(ref h_, "::Online::Vector3");
            IceInternal.HashUtil.hashAdd(ref h_, x);
            IceInternal.HashUtil.hashAdd(ref h_, y);
            IceInternal.HashUtil.hashAdd(ref h_, z);
            return h_;
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        public override bool Equals(object other)
        {
            if(!(other is Vector3))
            {
                return false;
            }
            Vector3 o = (Vector3)other;
            if(!this.x.Equals(o.x))
            {
                return false;
            }
            if(!this.y.Equals(o.y))
            {
                return false;
            }
            if(!this.z.Equals(o.z))
            {
                return false;
            }
            return true;
        }

        #endregion

        #region Comparison members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        public static bool operator==(Vector3 lhs, Vector3 rhs)
        {
            return Equals(lhs, rhs);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        public static bool operator!=(Vector3 lhs, Vector3 rhs)
        {
            return !Equals(lhs, rhs);
        }

        #endregion

        #region Marshaling support

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        public void ice_writeMembers(Ice.OutputStream ostr)
        {
            ostr.writeFloat(this.x);
            ostr.writeFloat(this.y);
            ostr.writeFloat(this.z);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        public void ice_readMembers(Ice.InputStream istr)
        {
            this.x = istr.readFloat();
            this.y = istr.readFloat();
            this.z = istr.readFloat();
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        public static void ice_write(Ice.OutputStream ostr, Vector3 v)
        {
            v.ice_writeMembers(ostr);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        public static Vector3 ice_read(Ice.InputStream istr)
        {
            var v = new Vector3();
            v.ice_readMembers(istr);
            return v;
        }

        #endregion
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    [_System.Serializable]
    public partial class AnimSetValue : Ice.Value
    {
        private const string _id = "::Online::AnimSetValue";

        public static new string ice_staticId()
        {
            return _id;
        }
        public override string ice_id()
        {
            return _id;
        }

        #region Marshaling support

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        protected override void iceWriteImpl(Ice.OutputStream ostr_)
        {
            ostr_.startSlice(ice_staticId(), -1, true);
            ostr_.endSlice();
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        protected override void iceReadImpl(Ice.InputStream istr_)
        {
            istr_.startSlice();
            istr_.endSlice();
        }

        #endregion
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    [_System.Serializable]
    public partial class AnimSetFloat : Online.AnimSetValue
    {
        #region Slice data members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        public string Variable;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        public float NewValue;

        #endregion

        #region Constructors

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        public AnimSetFloat() : base()
        {
            this.Variable = "";
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        public AnimSetFloat(string Variable, float NewValue)
        {
            this.Variable = Variable;
            this.NewValue = NewValue;
        }

        #endregion

        private const string _id = "::Online::AnimSetFloat";

        public static new string ice_staticId()
        {
            return _id;
        }
        public override string ice_id()
        {
            return _id;
        }

        #region Marshaling support

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        protected override void iceWriteImpl(Ice.OutputStream ostr_)
        {
            ostr_.startSlice(ice_staticId(), -1, false);
            ostr_.writeString(Variable);
            ostr_.writeFloat(NewValue);
            ostr_.endSlice();
            base.iceWriteImpl(ostr_);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        protected override void iceReadImpl(Ice.InputStream istr_)
        {
            istr_.startSlice();
            Variable = istr_.readString();
            NewValue = istr_.readFloat();
            istr_.endSlice();
            base.iceReadImpl(istr_);
        }

        #endregion
    }

    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    [_System.Serializable]
    public partial struct Transform
    {
        #region Slice data members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        public Online.Vector3 Position;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        public Online.Vector3 Rotation;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        public Online.Vector3 Scale;

        #endregion

        #region Constructor

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        public Transform(Online.Vector3 Position, Online.Vector3 Rotation, Online.Vector3 Scale)
        {
            this.Position = Position;
            this.Rotation = Rotation;
            this.Scale = Scale;
        }

        #endregion

        #region Object members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        public override int GetHashCode()
        {
            int h_ = 5381;
            IceInternal.HashUtil.hashAdd(ref h_, "::Online::Transform");
            IceInternal.HashUtil.hashAdd(ref h_, Position);
            IceInternal.HashUtil.hashAdd(ref h_, Rotation);
            IceInternal.HashUtil.hashAdd(ref h_, Scale);
            return h_;
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        public override bool Equals(object other)
        {
            if(!(other is Transform))
            {
                return false;
            }
            Transform o = (Transform)other;
            if(!this.Position.Equals(o.Position))
            {
                return false;
            }
            if(!this.Rotation.Equals(o.Rotation))
            {
                return false;
            }
            if(!this.Scale.Equals(o.Scale))
            {
                return false;
            }
            return true;
        }

        #endregion

        #region Comparison members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        public static bool operator==(Transform lhs, Transform rhs)
        {
            return Equals(lhs, rhs);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        public static bool operator!=(Transform lhs, Transform rhs)
        {
            return !Equals(lhs, rhs);
        }

        #endregion

        #region Marshaling support

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        public void ice_writeMembers(Ice.OutputStream ostr)
        {
            this.Position.ice_writeMembers(ostr);
            this.Rotation.ice_writeMembers(ostr);
            this.Scale.ice_writeMembers(ostr);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        public void ice_readMembers(Ice.InputStream istr)
        {
            this.Position.ice_readMembers(istr);
            this.Rotation.ice_readMembers(istr);
            this.Scale.ice_readMembers(istr);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        public static void ice_write(Ice.OutputStream ostr, Transform v)
        {
            v.ice_writeMembers(ostr);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        public static Transform ice_read(Ice.InputStream istr)
        {
            var v = new Transform();
            v.ice_readMembers(istr);
            return v;
        }

        #endregion
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    [_System.Serializable]
    public partial class DynamicObjectUpdate : Ice.Value
    {
        #region Slice data members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        public Online.Vector3 Position;

        #endregion

        #region Constructors

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        public DynamicObjectUpdate()
        {
            this.Position = new Online.Vector3();
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        public DynamicObjectUpdate(Online.Vector3 Position)
        {
            this.Position = Position;
        }

        #endregion

        private const string _id = "::Online::DynamicObjectUpdate";

        public static new string ice_staticId()
        {
            return _id;
        }
        public override string ice_id()
        {
            return _id;
        }

        #region Marshaling support

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        protected override void iceWriteImpl(Ice.OutputStream ostr_)
        {
            ostr_.startSlice(ice_staticId(), -1, true);
            Position.ice_writeMembers(ostr_);
            ostr_.endSlice();
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        protected override void iceReadImpl(Ice.InputStream istr_)
        {
            istr_.startSlice();
            Position.ice_readMembers(istr_);
            istr_.endSlice();
        }

        #endregion
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    [_System.Serializable]
    public partial class AnimatedDynamicObjectUpdate : Online.DynamicObjectUpdate
    {
        #region Slice data members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        public Online.AnimSetValue[] AnimUList;

        #endregion

        #region Constructors

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        public AnimatedDynamicObjectUpdate() : base()
        {
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        public AnimatedDynamicObjectUpdate(Online.Vector3 Position, Online.AnimSetValue[] AnimUList) : base(Position)
        {
            this.AnimUList = AnimUList;
        }

        #endregion

        private const string _id = "::Online::AnimatedDynamicObjectUpdate";

        public static new string ice_staticId()
        {
            return _id;
        }
        public override string ice_id()
        {
            return _id;
        }

        #region Marshaling support

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        protected override void iceWriteImpl(Ice.OutputStream ostr_)
        {
            ostr_.startSlice(ice_staticId(), -1, false);
            Online.AnimatorUpdatesHelper.write(ostr_, AnimUList);
            ostr_.endSlice();
            base.iceWriteImpl(ostr_);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        protected override void iceReadImpl(Ice.InputStream istr_)
        {
            istr_.startSlice();
            AnimUList = Online.AnimatorUpdatesHelper.read(istr_);
            istr_.endSlice();
            base.iceReadImpl(istr_);
        }

        #endregion
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    [_System.Serializable]
    public partial class Command : Ice.Value
    {
        private const string _id = "::Online::Command";

        public static new string ice_staticId()
        {
            return _id;
        }
        public override string ice_id()
        {
            return _id;
        }

        #region Marshaling support

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        protected override void iceWriteImpl(Ice.OutputStream ostr_)
        {
            ostr_.startSlice(ice_staticId(), -1, true);
            ostr_.endSlice();
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        protected override void iceReadImpl(Ice.InputStream istr_)
        {
            istr_.startSlice();
            istr_.endSlice();
        }

        #endregion
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    [_System.Serializable]
    public partial class CreateCommand : Online.Command
    {
        #region Slice data members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        public long Id;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        public string Prefab;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        public Online.Transform Origin;

        #endregion

        #region Constructors

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        public CreateCommand() : base()
        {
            this.Prefab = "";
            this.Origin = new Online.Transform();
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        public CreateCommand(long Id, string Prefab, Online.Transform Origin)
        {
            this.Id = Id;
            this.Prefab = Prefab;
            this.Origin = Origin;
        }

        #endregion

        private const string _id = "::Online::CreateCommand";

        public static new string ice_staticId()
        {
            return _id;
        }
        public override string ice_id()
        {
            return _id;
        }

        #region Marshaling support

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        protected override void iceWriteImpl(Ice.OutputStream ostr_)
        {
            ostr_.startSlice(ice_staticId(), -1, false);
            ostr_.writeLong(Id);
            ostr_.writeString(Prefab);
            Origin.ice_writeMembers(ostr_);
            ostr_.endSlice();
            base.iceWriteImpl(ostr_);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        protected override void iceReadImpl(Ice.InputStream istr_)
        {
            istr_.startSlice();
            Id = istr_.readLong();
            Prefab = istr_.readString();
            Origin.ice_readMembers(istr_);
            istr_.endSlice();
            base.iceReadImpl(istr_);
        }

        #endregion
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    [_System.Serializable]
    public partial class UpdateCommand : Online.Command
    {
        #region Slice data members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        public long Id;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        public Online.DynamicObjectUpdate Update;

        #endregion

        #region Constructors

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        public UpdateCommand() : base()
        {
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        public UpdateCommand(long Id, Online.DynamicObjectUpdate Update)
        {
            this.Id = Id;
            this.Update = Update;
        }

        #endregion

        private const string _id = "::Online::UpdateCommand";

        public static new string ice_staticId()
        {
            return _id;
        }
        public override string ice_id()
        {
            return _id;
        }

        #region Marshaling support

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        protected override void iceWriteImpl(Ice.OutputStream ostr_)
        {
            ostr_.startSlice(ice_staticId(), -1, false);
            ostr_.writeLong(Id);
            ostr_.writeValue(Update);
            ostr_.endSlice();
            base.iceWriteImpl(ostr_);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        protected override void iceReadImpl(Ice.InputStream istr_)
        {
            istr_.startSlice();
            Id = istr_.readLong();
            istr_.readValue((Online.DynamicObjectUpdate v) => { this.Update = v; });
            istr_.endSlice();
            base.iceReadImpl(istr_);
        }

        #endregion
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    [_System.Serializable]
    public partial class DestroyCommand : Online.Command
    {
        #region Slice data members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        public long Id;

        #endregion

        #region Constructors

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        public DestroyCommand() : base()
        {
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        public DestroyCommand(long Id)
        {
            this.Id = Id;
        }

        #endregion

        private const string _id = "::Online::DestroyCommand";

        public static new string ice_staticId()
        {
            return _id;
        }
        public override string ice_id()
        {
            return _id;
        }

        #region Marshaling support

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        protected override void iceWriteImpl(Ice.OutputStream ostr_)
        {
            ostr_.startSlice(ice_staticId(), -1, false);
            ostr_.writeLong(Id);
            ostr_.endSlice();
            base.iceWriteImpl(ostr_);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        protected override void iceReadImpl(Ice.InputStream istr_)
        {
            istr_.startSlice();
            Id = istr_.readLong();
            istr_.endSlice();
            base.iceReadImpl(istr_);
        }

        #endregion
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface Client : Ice.Object, ClientOperations_
    {
    }

    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    [_System.Serializable]
    public partial class PlayerStats : _System.ICloneable
    {
        #region Slice data members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        public string Username;

        #endregion

        #region Constructors

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        public PlayerStats()
        {
            this.Username = "";
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        public PlayerStats(string Username)
        {
            this.Username = Username;
        }

        #endregion

        #region ICloneable members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        public object Clone()
        {
            return MemberwiseClone();
        }

        #endregion

        #region Object members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        public override int GetHashCode()
        {
            int h_ = 5381;
            IceInternal.HashUtil.hashAdd(ref h_, "::Online::PlayerStats");
            IceInternal.HashUtil.hashAdd(ref h_, Username);
            return h_;
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        public override bool Equals(object other)
        {
            if(object.ReferenceEquals(this, other))
            {
                return true;
            }
            if(other == null)
            {
                return false;
            }
            if(GetType() != other.GetType())
            {
                return false;
            }
            PlayerStats o = (PlayerStats)other;
            if(this.Username == null)
            {
                if(o.Username != null)
                {
                    return false;
                }
            }
            else
            {
                if(!this.Username.Equals(o.Username))
                {
                    return false;
                }
            }
            return true;
        }

        #endregion

        #region Comparison members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        public static bool operator==(PlayerStats lhs, PlayerStats rhs)
        {
            return Equals(lhs, rhs);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        public static bool operator!=(PlayerStats lhs, PlayerStats rhs)
        {
            return !Equals(lhs, rhs);
        }

        #endregion

        #region Marshaling support

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        public void ice_writeMembers(Ice.OutputStream ostr)
        {
            ostr.writeString(this.Username);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        public void ice_readMembers(Ice.InputStream istr)
        {
            this.Username = istr.readString();
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        public static void ice_write(Ice.OutputStream ostr, PlayerStats v)
        {
            if(v == null)
            {
                _nullMarshalValue.ice_writeMembers(ostr);
            }
            else
            {
                v.ice_writeMembers(ostr);
            }
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        public static PlayerStats ice_read(Ice.InputStream istr)
        {
            var v = new PlayerStats();
            v.ice_readMembers(istr);
            return v;
        }

        private static readonly PlayerStats _nullMarshalValue = new PlayerStats();

        #endregion
    }

    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    [_System.Serializable]
    public partial class LobbyInfo : _System.ICloneable
    {
        #region Slice data members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        public string Id;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        public Online.PlayerStats Host;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        public Online.PlayerStats[] Players;

        #endregion

        #region Constructors

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        public LobbyInfo()
        {
            this.Id = "";
            this.Host = new Online.PlayerStats();
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        public LobbyInfo(string Id, Online.PlayerStats Host, Online.PlayerStats[] Players)
        {
            this.Id = Id;
            this.Host = Host;
            this.Players = Players;
        }

        #endregion

        #region ICloneable members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        public object Clone()
        {
            return MemberwiseClone();
        }

        #endregion

        #region Object members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        public override int GetHashCode()
        {
            int h_ = 5381;
            IceInternal.HashUtil.hashAdd(ref h_, "::Online::LobbyInfo");
            IceInternal.HashUtil.hashAdd(ref h_, Id);
            IceInternal.HashUtil.hashAdd(ref h_, Host);
            IceInternal.HashUtil.hashAdd(ref h_, Players);
            return h_;
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        public override bool Equals(object other)
        {
            if(object.ReferenceEquals(this, other))
            {
                return true;
            }
            if(other == null)
            {
                return false;
            }
            if(GetType() != other.GetType())
            {
                return false;
            }
            LobbyInfo o = (LobbyInfo)other;
            if(this.Id == null)
            {
                if(o.Id != null)
                {
                    return false;
                }
            }
            else
            {
                if(!this.Id.Equals(o.Id))
                {
                    return false;
                }
            }
            if(this.Host == null)
            {
                if(o.Host != null)
                {
                    return false;
                }
            }
            else
            {
                if(!this.Host.Equals(o.Host))
                {
                    return false;
                }
            }
            if(this.Players == null)
            {
                if(o.Players != null)
                {
                    return false;
                }
            }
            else
            {
                if(!IceUtilInternal.Arrays.Equals(this.Players, o.Players))
                {
                    return false;
                }
            }
            return true;
        }

        #endregion

        #region Comparison members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        public static bool operator==(LobbyInfo lhs, LobbyInfo rhs)
        {
            return Equals(lhs, rhs);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        public static bool operator!=(LobbyInfo lhs, LobbyInfo rhs)
        {
            return !Equals(lhs, rhs);
        }

        #endregion

        #region Marshaling support

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        public void ice_writeMembers(Ice.OutputStream ostr)
        {
            ostr.writeString(this.Id);
            Online.PlayerStats.ice_write(ostr, this.Host);
            Online.PlayerListHelper.write(ostr, this.Players);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        public void ice_readMembers(Ice.InputStream istr)
        {
            this.Id = istr.readString();
            this.Host = Online.PlayerStats.ice_read(istr);
            this.Players = Online.PlayerListHelper.read(istr);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        public static void ice_write(Ice.OutputStream ostr, LobbyInfo v)
        {
            if(v == null)
            {
                _nullMarshalValue.ice_writeMembers(ostr);
            }
            else
            {
                v.ice_writeMembers(ostr);
            }
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        public static LobbyInfo ice_read(Ice.InputStream istr)
        {
            var v = new LobbyInfo();
            v.ice_readMembers(istr);
            return v;
        }

        private static readonly LobbyInfo _nullMarshalValue = new LobbyInfo();

        #endregion
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface Game : Ice.Object, GameOperations_
    {
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface GameHost : Ice.Object, GameHostOperations_, Online.Game
    {
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface Server : Ice.Object, ServerOperations_
    {
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface Player : Ice.Object, PlayerOperations_
    {
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface LobbyListener : Ice.Object, LobbyListenerOperations_
    {
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface PlayerRegister : Ice.Object, PlayerRegisterOperations_
    {
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface GameRegister : Ice.Object, GameRegisterOperations_
    {
    }
}

namespace Online
{
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
    public delegate void Callback_Client_GetInput();

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
    public delegate void Callback_Client_Update();

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
    public delegate void Callback_Client_Notify();

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
    public delegate void Callback_Client_NotifyKicked();

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
    public delegate void Callback_Client_MakeHost(Online.ServerPrx ret);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
    public delegate void Callback_Game_GetLobbyInfo(Online.LobbyInfo ret);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
    public delegate void Callback_GameHost_StartGame();

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
    public delegate void Callback_GameHost_KickPlayer();

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
    public delegate void Callback_GameHost_LockRoom();

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
    public delegate void Callback_GameHost_UnlockRoom();

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
    public delegate void Callback_Server_StartGame();

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
    public delegate void Callback_Player_GetStats(Online.PlayerStats ret);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
    public delegate void Callback_Player_JoinGame(bool ret);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
    public delegate void Callback_Player_CreateGame(Online.GameHostPrx ret);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
    public delegate void Callback_Player_LeaveGame();

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
    public delegate void Callback_Player_LogOut();

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
    public delegate void Callback_LobbyListener_Update();

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
    public delegate void Callback_LobbyListener_Ping(bool ret);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
    public delegate void Callback_PlayerRegister_Login(Online.PlayerPrx ret);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
    public delegate void Callback_PlayerRegister_CreateNew(Online.PlayerPrx ret);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
    public delegate void Callback_GameRegister_Connect(Online.PlayerRegisterPrx ret);
}

namespace Online
{
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
    public interface ClientPrx : Ice.ObjectPrx
    {
        void GetInput(Ice.OptionalContext context = new Ice.OptionalContext());

        _System.Threading.Tasks.Task GetInputAsync(Ice.OptionalContext context = new Ice.OptionalContext(), _System.IProgress<bool> progress = null, _System.Threading.CancellationToken cancel = new _System.Threading.CancellationToken());

        Ice.AsyncResult<Online.Callback_Client_GetInput> begin_GetInput(Ice.OptionalContext context = new Ice.OptionalContext());

        Ice.AsyncResult begin_GetInput(Ice.AsyncCallback callback, object cookie);

        Ice.AsyncResult begin_GetInput(Ice.OptionalContext context, Ice.AsyncCallback callback, object cookie);

        void end_GetInput(Ice.AsyncResult asyncResult);

        void Update(Online.Command[] commandList, Ice.OptionalContext context = new Ice.OptionalContext());

        _System.Threading.Tasks.Task UpdateAsync(Online.Command[] commandList, Ice.OptionalContext context = new Ice.OptionalContext(), _System.IProgress<bool> progress = null, _System.Threading.CancellationToken cancel = new _System.Threading.CancellationToken());

        Ice.AsyncResult<Online.Callback_Client_Update> begin_Update(Online.Command[] commandList, Ice.OptionalContext context = new Ice.OptionalContext());

        Ice.AsyncResult begin_Update(Online.Command[] commandList, Ice.AsyncCallback callback, object cookie);

        Ice.AsyncResult begin_Update(Online.Command[] commandList, Ice.OptionalContext context, Ice.AsyncCallback callback, object cookie);

        void end_Update(Ice.AsyncResult asyncResult);

        void Notify(Ice.OptionalContext context = new Ice.OptionalContext());

        _System.Threading.Tasks.Task NotifyAsync(Ice.OptionalContext context = new Ice.OptionalContext(), _System.IProgress<bool> progress = null, _System.Threading.CancellationToken cancel = new _System.Threading.CancellationToken());

        Ice.AsyncResult<Online.Callback_Client_Notify> begin_Notify(Ice.OptionalContext context = new Ice.OptionalContext());

        Ice.AsyncResult begin_Notify(Ice.AsyncCallback callback, object cookie);

        Ice.AsyncResult begin_Notify(Ice.OptionalContext context, Ice.AsyncCallback callback, object cookie);

        void end_Notify(Ice.AsyncResult asyncResult);

        void NotifyKicked(Ice.OptionalContext context = new Ice.OptionalContext());

        _System.Threading.Tasks.Task NotifyKickedAsync(Ice.OptionalContext context = new Ice.OptionalContext(), _System.IProgress<bool> progress = null, _System.Threading.CancellationToken cancel = new _System.Threading.CancellationToken());

        Ice.AsyncResult<Online.Callback_Client_NotifyKicked> begin_NotifyKicked(Ice.OptionalContext context = new Ice.OptionalContext());

        Ice.AsyncResult begin_NotifyKicked(Ice.AsyncCallback callback, object cookie);

        Ice.AsyncResult begin_NotifyKicked(Ice.OptionalContext context, Ice.AsyncCallback callback, object cookie);

        void end_NotifyKicked(Ice.AsyncResult asyncResult);

        Online.ServerPrx MakeHost(Ice.OptionalContext context = new Ice.OptionalContext());

        _System.Threading.Tasks.Task<Online.ServerPrx> MakeHostAsync(Ice.OptionalContext context = new Ice.OptionalContext(), _System.IProgress<bool> progress = null, _System.Threading.CancellationToken cancel = new _System.Threading.CancellationToken());

        Ice.AsyncResult<Online.Callback_Client_MakeHost> begin_MakeHost(Ice.OptionalContext context = new Ice.OptionalContext());

        Ice.AsyncResult begin_MakeHost(Ice.AsyncCallback callback, object cookie);

        Ice.AsyncResult begin_MakeHost(Ice.OptionalContext context, Ice.AsyncCallback callback, object cookie);

        Online.ServerPrx end_MakeHost(Ice.AsyncResult asyncResult);
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
    public interface GamePrx : Ice.ObjectPrx
    {
        Online.LobbyInfo GetLobbyInfo(Ice.OptionalContext context = new Ice.OptionalContext());

        _System.Threading.Tasks.Task<Online.LobbyInfo> GetLobbyInfoAsync(Ice.OptionalContext context = new Ice.OptionalContext(), _System.IProgress<bool> progress = null, _System.Threading.CancellationToken cancel = new _System.Threading.CancellationToken());

        Ice.AsyncResult<Online.Callback_Game_GetLobbyInfo> begin_GetLobbyInfo(Ice.OptionalContext context = new Ice.OptionalContext());

        Ice.AsyncResult begin_GetLobbyInfo(Ice.AsyncCallback callback, object cookie);

        Ice.AsyncResult begin_GetLobbyInfo(Ice.OptionalContext context, Ice.AsyncCallback callback, object cookie);

        Online.LobbyInfo end_GetLobbyInfo(Ice.AsyncResult asyncResult);
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
    public interface GameHostPrx : Online.GamePrx
    {
        void StartGame(Ice.OptionalContext context = new Ice.OptionalContext());

        _System.Threading.Tasks.Task StartGameAsync(Ice.OptionalContext context = new Ice.OptionalContext(), _System.IProgress<bool> progress = null, _System.Threading.CancellationToken cancel = new _System.Threading.CancellationToken());

        Ice.AsyncResult<Online.Callback_GameHost_StartGame> begin_StartGame(Ice.OptionalContext context = new Ice.OptionalContext());

        Ice.AsyncResult begin_StartGame(Ice.AsyncCallback callback, object cookie);

        Ice.AsyncResult begin_StartGame(Ice.OptionalContext context, Ice.AsyncCallback callback, object cookie);

        void end_StartGame(Ice.AsyncResult asyncResult);

        void KickPlayer(string username, Ice.OptionalContext context = new Ice.OptionalContext());

        _System.Threading.Tasks.Task KickPlayerAsync(string username, Ice.OptionalContext context = new Ice.OptionalContext(), _System.IProgress<bool> progress = null, _System.Threading.CancellationToken cancel = new _System.Threading.CancellationToken());

        Ice.AsyncResult<Online.Callback_GameHost_KickPlayer> begin_KickPlayer(string username, Ice.OptionalContext context = new Ice.OptionalContext());

        Ice.AsyncResult begin_KickPlayer(string username, Ice.AsyncCallback callback, object cookie);

        Ice.AsyncResult begin_KickPlayer(string username, Ice.OptionalContext context, Ice.AsyncCallback callback, object cookie);

        void end_KickPlayer(Ice.AsyncResult asyncResult);

        void LockRoom(Ice.OptionalContext context = new Ice.OptionalContext());

        _System.Threading.Tasks.Task LockRoomAsync(Ice.OptionalContext context = new Ice.OptionalContext(), _System.IProgress<bool> progress = null, _System.Threading.CancellationToken cancel = new _System.Threading.CancellationToken());

        Ice.AsyncResult<Online.Callback_GameHost_LockRoom> begin_LockRoom(Ice.OptionalContext context = new Ice.OptionalContext());

        Ice.AsyncResult begin_LockRoom(Ice.AsyncCallback callback, object cookie);

        Ice.AsyncResult begin_LockRoom(Ice.OptionalContext context, Ice.AsyncCallback callback, object cookie);

        void end_LockRoom(Ice.AsyncResult asyncResult);

        void UnlockRoom(Ice.OptionalContext context = new Ice.OptionalContext());

        _System.Threading.Tasks.Task UnlockRoomAsync(Ice.OptionalContext context = new Ice.OptionalContext(), _System.IProgress<bool> progress = null, _System.Threading.CancellationToken cancel = new _System.Threading.CancellationToken());

        Ice.AsyncResult<Online.Callback_GameHost_UnlockRoom> begin_UnlockRoom(Ice.OptionalContext context = new Ice.OptionalContext());

        Ice.AsyncResult begin_UnlockRoom(Ice.AsyncCallback callback, object cookie);

        Ice.AsyncResult begin_UnlockRoom(Ice.OptionalContext context, Ice.AsyncCallback callback, object cookie);

        void end_UnlockRoom(Ice.AsyncResult asyncResult);
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
    public interface ServerPrx : Ice.ObjectPrx
    {
        void StartGame(Online.ClientPrx[] clientList, Ice.OptionalContext context = new Ice.OptionalContext());

        _System.Threading.Tasks.Task StartGameAsync(Online.ClientPrx[] clientList, Ice.OptionalContext context = new Ice.OptionalContext(), _System.IProgress<bool> progress = null, _System.Threading.CancellationToken cancel = new _System.Threading.CancellationToken());

        Ice.AsyncResult<Online.Callback_Server_StartGame> begin_StartGame(Online.ClientPrx[] clientList, Ice.OptionalContext context = new Ice.OptionalContext());

        Ice.AsyncResult begin_StartGame(Online.ClientPrx[] clientList, Ice.AsyncCallback callback, object cookie);

        Ice.AsyncResult begin_StartGame(Online.ClientPrx[] clientList, Ice.OptionalContext context, Ice.AsyncCallback callback, object cookie);

        void end_StartGame(Ice.AsyncResult asyncResult);
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
    public interface PlayerPrx : Ice.ObjectPrx
    {
        Online.PlayerStats GetStats(Ice.OptionalContext context = new Ice.OptionalContext());

        _System.Threading.Tasks.Task<Online.PlayerStats> GetStatsAsync(Ice.OptionalContext context = new Ice.OptionalContext(), _System.IProgress<bool> progress = null, _System.Threading.CancellationToken cancel = new _System.Threading.CancellationToken());

        Ice.AsyncResult<Online.Callback_Player_GetStats> begin_GetStats(Ice.OptionalContext context = new Ice.OptionalContext());

        Ice.AsyncResult begin_GetStats(Ice.AsyncCallback callback, object cookie);

        Ice.AsyncResult begin_GetStats(Ice.OptionalContext context, Ice.AsyncCallback callback, object cookie);

        Online.PlayerStats end_GetStats(Ice.AsyncResult asyncResult);

        bool JoinGame(Online.ClientPrx client, Online.GamePrx game, Ice.OptionalContext context = new Ice.OptionalContext());

        _System.Threading.Tasks.Task<bool> JoinGameAsync(Online.ClientPrx client, Online.GamePrx game, Ice.OptionalContext context = new Ice.OptionalContext(), _System.IProgress<bool> progress = null, _System.Threading.CancellationToken cancel = new _System.Threading.CancellationToken());

        Ice.AsyncResult<Online.Callback_Player_JoinGame> begin_JoinGame(Online.ClientPrx client, Online.GamePrx game, Ice.OptionalContext context = new Ice.OptionalContext());

        Ice.AsyncResult begin_JoinGame(Online.ClientPrx client, Online.GamePrx game, Ice.AsyncCallback callback, object cookie);

        Ice.AsyncResult begin_JoinGame(Online.ClientPrx client, Online.GamePrx game, Ice.OptionalContext context, Ice.AsyncCallback callback, object cookie);

        bool end_JoinGame(Ice.AsyncResult asyncResult);

        Online.GameHostPrx CreateGame(Online.ServerPrx server, Ice.OptionalContext context = new Ice.OptionalContext());

        _System.Threading.Tasks.Task<Online.GameHostPrx> CreateGameAsync(Online.ServerPrx server, Ice.OptionalContext context = new Ice.OptionalContext(), _System.IProgress<bool> progress = null, _System.Threading.CancellationToken cancel = new _System.Threading.CancellationToken());

        Ice.AsyncResult<Online.Callback_Player_CreateGame> begin_CreateGame(Online.ServerPrx server, Ice.OptionalContext context = new Ice.OptionalContext());

        Ice.AsyncResult begin_CreateGame(Online.ServerPrx server, Ice.AsyncCallback callback, object cookie);

        Ice.AsyncResult begin_CreateGame(Online.ServerPrx server, Ice.OptionalContext context, Ice.AsyncCallback callback, object cookie);

        Online.GameHostPrx end_CreateGame(Ice.AsyncResult asyncResult);

        void LeaveGame(Ice.OptionalContext context = new Ice.OptionalContext());

        _System.Threading.Tasks.Task LeaveGameAsync(Ice.OptionalContext context = new Ice.OptionalContext(), _System.IProgress<bool> progress = null, _System.Threading.CancellationToken cancel = new _System.Threading.CancellationToken());

        Ice.AsyncResult<Online.Callback_Player_LeaveGame> begin_LeaveGame(Ice.OptionalContext context = new Ice.OptionalContext());

        Ice.AsyncResult begin_LeaveGame(Ice.AsyncCallback callback, object cookie);

        Ice.AsyncResult begin_LeaveGame(Ice.OptionalContext context, Ice.AsyncCallback callback, object cookie);

        void end_LeaveGame(Ice.AsyncResult asyncResult);

        void LogOut(Ice.OptionalContext context = new Ice.OptionalContext());

        _System.Threading.Tasks.Task LogOutAsync(Ice.OptionalContext context = new Ice.OptionalContext(), _System.IProgress<bool> progress = null, _System.Threading.CancellationToken cancel = new _System.Threading.CancellationToken());

        Ice.AsyncResult<Online.Callback_Player_LogOut> begin_LogOut(Ice.OptionalContext context = new Ice.OptionalContext());

        Ice.AsyncResult begin_LogOut(Ice.AsyncCallback callback, object cookie);

        Ice.AsyncResult begin_LogOut(Ice.OptionalContext context, Ice.AsyncCallback callback, object cookie);

        void end_LogOut(Ice.AsyncResult asyncResult);
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
    public interface LobbyListenerPrx : Ice.ObjectPrx
    {
        void Update(Online.GamePrx[] list, Ice.OptionalContext context = new Ice.OptionalContext());

        _System.Threading.Tasks.Task UpdateAsync(Online.GamePrx[] list, Ice.OptionalContext context = new Ice.OptionalContext(), _System.IProgress<bool> progress = null, _System.Threading.CancellationToken cancel = new _System.Threading.CancellationToken());

        Ice.AsyncResult<Online.Callback_LobbyListener_Update> begin_Update(Online.GamePrx[] list, Ice.OptionalContext context = new Ice.OptionalContext());

        Ice.AsyncResult begin_Update(Online.GamePrx[] list, Ice.AsyncCallback callback, object cookie);

        Ice.AsyncResult begin_Update(Online.GamePrx[] list, Ice.OptionalContext context, Ice.AsyncCallback callback, object cookie);

        void end_Update(Ice.AsyncResult asyncResult);

        bool Ping(Ice.OptionalContext context = new Ice.OptionalContext());

        _System.Threading.Tasks.Task<bool> PingAsync(Ice.OptionalContext context = new Ice.OptionalContext(), _System.IProgress<bool> progress = null, _System.Threading.CancellationToken cancel = new _System.Threading.CancellationToken());

        Ice.AsyncResult<Online.Callback_LobbyListener_Ping> begin_Ping(Ice.OptionalContext context = new Ice.OptionalContext());

        Ice.AsyncResult begin_Ping(Ice.AsyncCallback callback, object cookie);

        Ice.AsyncResult begin_Ping(Ice.OptionalContext context, Ice.AsyncCallback callback, object cookie);

        bool end_Ping(Ice.AsyncResult asyncResult);
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
    public interface PlayerRegisterPrx : Ice.ObjectPrx
    {
        Online.PlayerPrx Login(string username, string password, Ice.OptionalContext context = new Ice.OptionalContext());

        _System.Threading.Tasks.Task<Online.PlayerPrx> LoginAsync(string username, string password, Ice.OptionalContext context = new Ice.OptionalContext(), _System.IProgress<bool> progress = null, _System.Threading.CancellationToken cancel = new _System.Threading.CancellationToken());

        Ice.AsyncResult<Online.Callback_PlayerRegister_Login> begin_Login(string username, string password, Ice.OptionalContext context = new Ice.OptionalContext());

        Ice.AsyncResult begin_Login(string username, string password, Ice.AsyncCallback callback, object cookie);

        Ice.AsyncResult begin_Login(string username, string password, Ice.OptionalContext context, Ice.AsyncCallback callback, object cookie);

        Online.PlayerPrx end_Login(Ice.AsyncResult asyncResult);

        Online.PlayerPrx CreateNew(string username, string password, Ice.OptionalContext context = new Ice.OptionalContext());

        _System.Threading.Tasks.Task<Online.PlayerPrx> CreateNewAsync(string username, string password, Ice.OptionalContext context = new Ice.OptionalContext(), _System.IProgress<bool> progress = null, _System.Threading.CancellationToken cancel = new _System.Threading.CancellationToken());

        Ice.AsyncResult<Online.Callback_PlayerRegister_CreateNew> begin_CreateNew(string username, string password, Ice.OptionalContext context = new Ice.OptionalContext());

        Ice.AsyncResult begin_CreateNew(string username, string password, Ice.AsyncCallback callback, object cookie);

        Ice.AsyncResult begin_CreateNew(string username, string password, Ice.OptionalContext context, Ice.AsyncCallback callback, object cookie);

        Online.PlayerPrx end_CreateNew(Ice.AsyncResult asyncResult);
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
    public interface GameRegisterPrx : Ice.ObjectPrx
    {
        Online.PlayerRegisterPrx Connect(Online.LobbyListenerPrx listener, Ice.OptionalContext context = new Ice.OptionalContext());

        _System.Threading.Tasks.Task<Online.PlayerRegisterPrx> ConnectAsync(Online.LobbyListenerPrx listener, Ice.OptionalContext context = new Ice.OptionalContext(), _System.IProgress<bool> progress = null, _System.Threading.CancellationToken cancel = new _System.Threading.CancellationToken());

        Ice.AsyncResult<Online.Callback_GameRegister_Connect> begin_Connect(Online.LobbyListenerPrx listener, Ice.OptionalContext context = new Ice.OptionalContext());

        Ice.AsyncResult begin_Connect(Online.LobbyListenerPrx listener, Ice.AsyncCallback callback, object cookie);

        Ice.AsyncResult begin_Connect(Online.LobbyListenerPrx listener, Ice.OptionalContext context, Ice.AsyncCallback callback, object cookie);

        Online.PlayerRegisterPrx end_Connect(Ice.AsyncResult asyncResult);
    }
}

namespace Online
{
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
    public interface ClientOperations_
    {
        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        void GetInput(Ice.Current current = null);

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        void Update(Online.Command[] commandList, Ice.Current current = null);

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        void Notify(Ice.Current current = null);

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        void NotifyKicked(Ice.Current current = null);

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        Online.ServerPrx MakeHost(Ice.Current current = null);
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
    public interface GameOperations_
    {
        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        Online.LobbyInfo GetLobbyInfo(Ice.Current current = null);
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
    public interface GameHostOperations_ : Online.GameOperations_
    {
        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        void StartGame(Ice.Current current = null);

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        void KickPlayer(string username, Ice.Current current = null);

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        void LockRoom(Ice.Current current = null);

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        void UnlockRoom(Ice.Current current = null);
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
    public interface ServerOperations_
    {
        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        void StartGame(Online.ClientPrx[] clientList, Ice.Current current = null);
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
    public interface PlayerOperations_
    {
        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        Online.PlayerStats GetStats(Ice.Current current = null);

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        bool JoinGame(Online.ClientPrx client, Online.GamePrx game, Ice.Current current = null);

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        Online.GameHostPrx CreateGame(Online.ServerPrx server, Ice.Current current = null);

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        void LeaveGame(Ice.Current current = null);

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        void LogOut(Ice.Current current = null);
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
    public interface LobbyListenerOperations_
    {
        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        void Update(Online.GamePrx[] list, Ice.Current current = null);

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        bool Ping(Ice.Current current = null);
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
    public interface PlayerRegisterOperations_
    {
        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        Online.PlayerPrx Login(string username, string password, Ice.Current current = null);

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        Online.PlayerPrx CreateNew(string username, string password, Ice.Current current = null);
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
    public interface GameRegisterOperations_
    {
        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        Online.PlayerRegisterPrx Connect(Online.LobbyListenerPrx listener, Ice.Current current = null);
    }
}

namespace Online
{
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
    public sealed class strListHelper
    {
        public static void write(Ice.OutputStream ostr, string[] v)
        {
            ostr.writeStringSeq(v);
        }

        public static string[] read(Ice.InputStream istr)
        {
            string[] v;
            v = istr.readStringSeq();
            return v;
        }
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
    public sealed class AnimatorUpdatesHelper
    {
        public static void write(Ice.OutputStream ostr, Online.AnimSetValue[] v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    ostr.writeValue(v[ix]);
                }
            }
        }

        public static Online.AnimSetValue[] read(Ice.InputStream istr)
        {
            Online.AnimSetValue[] v;
            {
                int szx = istr.readAndCheckSeqSize(1);
                v = new Online.AnimSetValue[szx];
                for(int ix = 0; ix < szx; ++ix)
                {
                    istr.readValue(IceInternal.Patcher.arrayReadValue<Online.AnimSetValue>(v, ix));
                }
            }
            return v;
        }
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
    public sealed class CommandListHelper
    {
        public static void write(Ice.OutputStream ostr, Online.Command[] v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    ostr.writeValue(v[ix]);
                }
            }
        }

        public static Online.Command[] read(Ice.InputStream istr)
        {
            Online.Command[] v;
            {
                int szx = istr.readAndCheckSeqSize(1);
                v = new Online.Command[szx];
                for(int ix = 0; ix < szx; ++ix)
                {
                    istr.readValue(IceInternal.Patcher.arrayReadValue<Online.Command>(v, ix));
                }
            }
            return v;
        }
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
    [_System.Serializable]
    public sealed class ClientPrxHelper : Ice.ObjectPrxHelperBase, ClientPrx
    {
        public ClientPrxHelper()
        {
        }

        public ClientPrxHelper(_System.Runtime.Serialization.SerializationInfo info, _System.Runtime.Serialization.StreamingContext context) : base(info, context)
        {
        }

        #region Synchronous operations

        public void GetInput(Ice.OptionalContext context = new Ice.OptionalContext())
        {
            try
            {
                _iceI_GetInputAsync(context, null, _System.Threading.CancellationToken.None, true).Wait();
            }
            catch(_System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public Online.ServerPrx MakeHost(Ice.OptionalContext context = new Ice.OptionalContext())
        {
            try
            {
                return _iceI_MakeHostAsync(context, null, _System.Threading.CancellationToken.None, true).Result;
            }
            catch(_System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void Notify(Ice.OptionalContext context = new Ice.OptionalContext())
        {
            try
            {
                _iceI_NotifyAsync(context, null, _System.Threading.CancellationToken.None, true).Wait();
            }
            catch(_System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void NotifyKicked(Ice.OptionalContext context = new Ice.OptionalContext())
        {
            try
            {
                _iceI_NotifyKickedAsync(context, null, _System.Threading.CancellationToken.None, true).Wait();
            }
            catch(_System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void Update(Online.Command[] commandList, Ice.OptionalContext context = new Ice.OptionalContext())
        {
            try
            {
                _iceI_UpdateAsync(commandList, context, null, _System.Threading.CancellationToken.None, true).Wait();
            }
            catch(_System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        #endregion

        #region Async Task operations

        public _System.Threading.Tasks.Task GetInputAsync(Ice.OptionalContext context = new Ice.OptionalContext(), _System.IProgress<bool> progress = null, _System.Threading.CancellationToken cancel = new _System.Threading.CancellationToken())
        {
            return _iceI_GetInputAsync(context, progress, cancel, false);
        }

        private _System.Threading.Tasks.Task _iceI_GetInputAsync(Ice.OptionalContext context, _System.IProgress<bool> progress, _System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_GetInput(context, synchronous, completed);
            return completed.Task;
        }

        private const string _GetInput_name = "GetInput";

        private void _iceI_GetInput(_System.Collections.Generic.Dictionary<string, string> context, bool synchronous, IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _GetInput_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous);
        }

        public _System.Threading.Tasks.Task<Online.ServerPrx> MakeHostAsync(Ice.OptionalContext context = new Ice.OptionalContext(), _System.IProgress<bool> progress = null, _System.Threading.CancellationToken cancel = new _System.Threading.CancellationToken())
        {
            return _iceI_MakeHostAsync(context, progress, cancel, false);
        }

        private _System.Threading.Tasks.Task<Online.ServerPrx> _iceI_MakeHostAsync(Ice.OptionalContext context, _System.IProgress<bool> progress, _System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_MakeHost_name);
            var completed = new IceInternal.OperationTaskCompletionCallback<Online.ServerPrx>(progress, cancel);
            _iceI_MakeHost(context, synchronous, completed);
            return completed.Task;
        }

        private const string _MakeHost_name = "MakeHost";

        private void _iceI_MakeHost(_System.Collections.Generic.Dictionary<string, string> context, bool synchronous, IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<Online.ServerPrx>(completed);
            outAsync.invoke(
                _MakeHost_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (Ice.InputStream istr) =>
                {
                    Online.ServerPrx ret;
                    ret = Online.ServerPrxHelper.read(istr);
                    return ret;
                });
        }

        public _System.Threading.Tasks.Task NotifyAsync(Ice.OptionalContext context = new Ice.OptionalContext(), _System.IProgress<bool> progress = null, _System.Threading.CancellationToken cancel = new _System.Threading.CancellationToken())
        {
            return _iceI_NotifyAsync(context, progress, cancel, false);
        }

        private _System.Threading.Tasks.Task _iceI_NotifyAsync(Ice.OptionalContext context, _System.IProgress<bool> progress, _System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_Notify(context, synchronous, completed);
            return completed.Task;
        }

        private const string _Notify_name = "Notify";

        private void _iceI_Notify(_System.Collections.Generic.Dictionary<string, string> context, bool synchronous, IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _Notify_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous);
        }

        public _System.Threading.Tasks.Task NotifyKickedAsync(Ice.OptionalContext context = new Ice.OptionalContext(), _System.IProgress<bool> progress = null, _System.Threading.CancellationToken cancel = new _System.Threading.CancellationToken())
        {
            return _iceI_NotifyKickedAsync(context, progress, cancel, false);
        }

        private _System.Threading.Tasks.Task _iceI_NotifyKickedAsync(Ice.OptionalContext context, _System.IProgress<bool> progress, _System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_NotifyKicked(context, synchronous, completed);
            return completed.Task;
        }

        private const string _NotifyKicked_name = "NotifyKicked";

        private void _iceI_NotifyKicked(_System.Collections.Generic.Dictionary<string, string> context, bool synchronous, IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _NotifyKicked_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous);
        }

        public _System.Threading.Tasks.Task UpdateAsync(Online.Command[] commandList, Ice.OptionalContext context = new Ice.OptionalContext(), _System.IProgress<bool> progress = null, _System.Threading.CancellationToken cancel = new _System.Threading.CancellationToken())
        {
            return _iceI_UpdateAsync(commandList, context, progress, cancel, false);
        }

        private _System.Threading.Tasks.Task _iceI_UpdateAsync(Online.Command[] iceP_commandList, Ice.OptionalContext context, _System.IProgress<bool> progress, _System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_Update(iceP_commandList, context, synchronous, completed);
            return completed.Task;
        }

        private const string _Update_name = "Update";

        private void _iceI_Update(Online.Command[] iceP_commandList, _System.Collections.Generic.Dictionary<string, string> context, bool synchronous, IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _Update_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    Online.CommandListHelper.write(ostr, iceP_commandList);
                    ostr.writePendingValues();
                });
        }

        #endregion

        #region Asynchronous operations

        public Ice.AsyncResult<Online.Callback_Client_GetInput> begin_GetInput(Ice.OptionalContext context = new Ice.OptionalContext())
        {
            return begin_GetInput(context, null, null, false);
        }

        public Ice.AsyncResult begin_GetInput(Ice.AsyncCallback callback, object cookie)
        {
            return begin_GetInput(new Ice.OptionalContext(), callback, cookie, false);
        }

        public Ice.AsyncResult begin_GetInput(Ice.OptionalContext context, Ice.AsyncCallback callback, object cookie)
        {
            return begin_GetInput(context, callback, cookie, false);
        }

        public void end_GetInput(Ice.AsyncResult asyncResult)
        {
            var resultI_ = IceInternal.AsyncResultI.check(asyncResult, this, _GetInput_name);
            ((IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private Ice.AsyncResult<Online.Callback_Client_GetInput> begin_GetInput(_System.Collections.Generic.Dictionary<string, string> context, Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new IceInternal.OperationAsyncResultCompletionCallback<Online.Callback_Client_GetInput, object>(
                (Online.Callback_Client_GetInput cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _GetInput_name, cookie, completedCallback);
            _iceI_GetInput(context, synchronous, completed);
            return completed;
        }

        public Ice.AsyncResult<Online.Callback_Client_MakeHost> begin_MakeHost(Ice.OptionalContext context = new Ice.OptionalContext())
        {
            return begin_MakeHost(context, null, null, false);
        }

        public Ice.AsyncResult begin_MakeHost(Ice.AsyncCallback callback, object cookie)
        {
            return begin_MakeHost(new Ice.OptionalContext(), callback, cookie, false);
        }

        public Ice.AsyncResult begin_MakeHost(Ice.OptionalContext context, Ice.AsyncCallback callback, object cookie)
        {
            return begin_MakeHost(context, callback, cookie, false);
        }

        public Online.ServerPrx end_MakeHost(Ice.AsyncResult asyncResult)
        {
            var resultI_ = IceInternal.AsyncResultI.check(asyncResult, this, _MakeHost_name);
            var outgoing_ = (IceInternal.OutgoingAsyncT<Online.ServerPrx>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private Ice.AsyncResult<Online.Callback_Client_MakeHost> begin_MakeHost(_System.Collections.Generic.Dictionary<string, string> context, Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_MakeHost_name);
            var completed = new IceInternal.OperationAsyncResultCompletionCallback<Online.Callback_Client_MakeHost, Online.ServerPrx>(
                (Online.Callback_Client_MakeHost cb, Online.ServerPrx ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _MakeHost_name, cookie, completedCallback);
            _iceI_MakeHost(context, synchronous, completed);
            return completed;
        }

        public Ice.AsyncResult<Online.Callback_Client_Notify> begin_Notify(Ice.OptionalContext context = new Ice.OptionalContext())
        {
            return begin_Notify(context, null, null, false);
        }

        public Ice.AsyncResult begin_Notify(Ice.AsyncCallback callback, object cookie)
        {
            return begin_Notify(new Ice.OptionalContext(), callback, cookie, false);
        }

        public Ice.AsyncResult begin_Notify(Ice.OptionalContext context, Ice.AsyncCallback callback, object cookie)
        {
            return begin_Notify(context, callback, cookie, false);
        }

        public void end_Notify(Ice.AsyncResult asyncResult)
        {
            var resultI_ = IceInternal.AsyncResultI.check(asyncResult, this, _Notify_name);
            ((IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private Ice.AsyncResult<Online.Callback_Client_Notify> begin_Notify(_System.Collections.Generic.Dictionary<string, string> context, Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new IceInternal.OperationAsyncResultCompletionCallback<Online.Callback_Client_Notify, object>(
                (Online.Callback_Client_Notify cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _Notify_name, cookie, completedCallback);
            _iceI_Notify(context, synchronous, completed);
            return completed;
        }

        public Ice.AsyncResult<Online.Callback_Client_NotifyKicked> begin_NotifyKicked(Ice.OptionalContext context = new Ice.OptionalContext())
        {
            return begin_NotifyKicked(context, null, null, false);
        }

        public Ice.AsyncResult begin_NotifyKicked(Ice.AsyncCallback callback, object cookie)
        {
            return begin_NotifyKicked(new Ice.OptionalContext(), callback, cookie, false);
        }

        public Ice.AsyncResult begin_NotifyKicked(Ice.OptionalContext context, Ice.AsyncCallback callback, object cookie)
        {
            return begin_NotifyKicked(context, callback, cookie, false);
        }

        public void end_NotifyKicked(Ice.AsyncResult asyncResult)
        {
            var resultI_ = IceInternal.AsyncResultI.check(asyncResult, this, _NotifyKicked_name);
            ((IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private Ice.AsyncResult<Online.Callback_Client_NotifyKicked> begin_NotifyKicked(_System.Collections.Generic.Dictionary<string, string> context, Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new IceInternal.OperationAsyncResultCompletionCallback<Online.Callback_Client_NotifyKicked, object>(
                (Online.Callback_Client_NotifyKicked cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _NotifyKicked_name, cookie, completedCallback);
            _iceI_NotifyKicked(context, synchronous, completed);
            return completed;
        }

        public Ice.AsyncResult<Online.Callback_Client_Update> begin_Update(Online.Command[] commandList, Ice.OptionalContext context = new Ice.OptionalContext())
        {
            return begin_Update(commandList, context, null, null, false);
        }

        public Ice.AsyncResult begin_Update(Online.Command[] commandList, Ice.AsyncCallback callback, object cookie)
        {
            return begin_Update(commandList, new Ice.OptionalContext(), callback, cookie, false);
        }

        public Ice.AsyncResult begin_Update(Online.Command[] commandList, Ice.OptionalContext context, Ice.AsyncCallback callback, object cookie)
        {
            return begin_Update(commandList, context, callback, cookie, false);
        }

        public void end_Update(Ice.AsyncResult asyncResult)
        {
            var resultI_ = IceInternal.AsyncResultI.check(asyncResult, this, _Update_name);
            ((IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private Ice.AsyncResult<Online.Callback_Client_Update> begin_Update(Online.Command[] iceP_commandList, _System.Collections.Generic.Dictionary<string, string> context, Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new IceInternal.OperationAsyncResultCompletionCallback<Online.Callback_Client_Update, object>(
                (Online.Callback_Client_Update cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _Update_name, cookie, completedCallback);
            _iceI_Update(iceP_commandList, context, synchronous, completed);
            return completed;
        }

        #endregion

        #region Checked and unchecked cast operations

        public static ClientPrx checkedCast(Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            ClientPrx r = b as ClientPrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                ClientPrxHelper h = new ClientPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static ClientPrx checkedCast(Ice.ObjectPrx b, _System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            ClientPrx r = b as ClientPrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                ClientPrxHelper h = new ClientPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static ClientPrx checkedCast(Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    ClientPrxHelper h = new ClientPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static ClientPrx checkedCast(Ice.ObjectPrx b, string f, _System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    ClientPrxHelper h = new ClientPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static ClientPrx uncheckedCast(Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            ClientPrx r = b as ClientPrx;
            if(r == null)
            {
                ClientPrxHelper h = new ClientPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static ClientPrx uncheckedCast(Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            ClientPrxHelper h = new ClientPrxHelper();
            h.iceCopyFrom(bb);
            return h;
        }

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::Online::Client"
        };

        public static string ice_staticId()
        {
            return _ids[1];
        }

        #endregion

        #region Marshaling support

        public static void write(Ice.OutputStream ostr, ClientPrx v)
        {
            ostr.writeProxy(v);
        }

        public static ClientPrx read(Ice.InputStream istr)
        {
            Ice.ObjectPrx proxy = istr.readProxy();
            if(proxy != null)
            {
                ClientPrxHelper result = new ClientPrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
    public sealed class ClientListHelper
    {
        public static void write(Ice.OutputStream ostr, Online.ClientPrx[] v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    Online.ClientPrxHelper.write(ostr, v[ix]);
                }
            }
        }

        public static Online.ClientPrx[] read(Ice.InputStream istr)
        {
            Online.ClientPrx[] v;
            {
                int szx = istr.readAndCheckSeqSize(2);
                v = new Online.ClientPrx[szx];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix] = Online.ClientPrxHelper.read(istr);
                }
            }
            return v;
        }
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
    public sealed class PlayerListHelper
    {
        public static void write(Ice.OutputStream ostr, Online.PlayerStats[] v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    (v[ix] == null ? new Online.PlayerStats() : v[ix]).ice_writeMembers(ostr);
                }
            }
        }

        public static Online.PlayerStats[] read(Ice.InputStream istr)
        {
            Online.PlayerStats[] v;
            {
                int szx = istr.readAndCheckSeqSize(1);
                v = new Online.PlayerStats[szx];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix] = new Online.PlayerStats();
                    v[ix].ice_readMembers(istr);
                }
            }
            return v;
        }
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
    [_System.Serializable]
    public sealed class GamePrxHelper : Ice.ObjectPrxHelperBase, GamePrx
    {
        public GamePrxHelper()
        {
        }

        public GamePrxHelper(_System.Runtime.Serialization.SerializationInfo info, _System.Runtime.Serialization.StreamingContext context) : base(info, context)
        {
        }

        #region Synchronous operations

        public Online.LobbyInfo GetLobbyInfo(Ice.OptionalContext context = new Ice.OptionalContext())
        {
            try
            {
                return _iceI_GetLobbyInfoAsync(context, null, _System.Threading.CancellationToken.None, true).Result;
            }
            catch(_System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        #endregion

        #region Async Task operations

        public _System.Threading.Tasks.Task<Online.LobbyInfo> GetLobbyInfoAsync(Ice.OptionalContext context = new Ice.OptionalContext(), _System.IProgress<bool> progress = null, _System.Threading.CancellationToken cancel = new _System.Threading.CancellationToken())
        {
            return _iceI_GetLobbyInfoAsync(context, progress, cancel, false);
        }

        private _System.Threading.Tasks.Task<Online.LobbyInfo> _iceI_GetLobbyInfoAsync(Ice.OptionalContext context, _System.IProgress<bool> progress, _System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_GetLobbyInfo_name);
            var completed = new IceInternal.OperationTaskCompletionCallback<Online.LobbyInfo>(progress, cancel);
            _iceI_GetLobbyInfo(context, synchronous, completed);
            return completed.Task;
        }

        private const string _GetLobbyInfo_name = "GetLobbyInfo";

        private void _iceI_GetLobbyInfo(_System.Collections.Generic.Dictionary<string, string> context, bool synchronous, IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<Online.LobbyInfo>(completed);
            outAsync.invoke(
                _GetLobbyInfo_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (Ice.InputStream istr) =>
                {
                    Online.LobbyInfo ret = null;
                    ret = Online.LobbyInfo.ice_read(istr);
                    return ret;
                });
        }

        #endregion

        #region Asynchronous operations

        public Ice.AsyncResult<Online.Callback_Game_GetLobbyInfo> begin_GetLobbyInfo(Ice.OptionalContext context = new Ice.OptionalContext())
        {
            return begin_GetLobbyInfo(context, null, null, false);
        }

        public Ice.AsyncResult begin_GetLobbyInfo(Ice.AsyncCallback callback, object cookie)
        {
            return begin_GetLobbyInfo(new Ice.OptionalContext(), callback, cookie, false);
        }

        public Ice.AsyncResult begin_GetLobbyInfo(Ice.OptionalContext context, Ice.AsyncCallback callback, object cookie)
        {
            return begin_GetLobbyInfo(context, callback, cookie, false);
        }

        public Online.LobbyInfo end_GetLobbyInfo(Ice.AsyncResult asyncResult)
        {
            var resultI_ = IceInternal.AsyncResultI.check(asyncResult, this, _GetLobbyInfo_name);
            var outgoing_ = (IceInternal.OutgoingAsyncT<Online.LobbyInfo>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private Ice.AsyncResult<Online.Callback_Game_GetLobbyInfo> begin_GetLobbyInfo(_System.Collections.Generic.Dictionary<string, string> context, Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_GetLobbyInfo_name);
            var completed = new IceInternal.OperationAsyncResultCompletionCallback<Online.Callback_Game_GetLobbyInfo, Online.LobbyInfo>(
                (Online.Callback_Game_GetLobbyInfo cb, Online.LobbyInfo ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _GetLobbyInfo_name, cookie, completedCallback);
            _iceI_GetLobbyInfo(context, synchronous, completed);
            return completed;
        }

        #endregion

        #region Checked and unchecked cast operations

        public static GamePrx checkedCast(Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            GamePrx r = b as GamePrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                GamePrxHelper h = new GamePrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static GamePrx checkedCast(Ice.ObjectPrx b, _System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            GamePrx r = b as GamePrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                GamePrxHelper h = new GamePrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static GamePrx checkedCast(Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    GamePrxHelper h = new GamePrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static GamePrx checkedCast(Ice.ObjectPrx b, string f, _System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    GamePrxHelper h = new GamePrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static GamePrx uncheckedCast(Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            GamePrx r = b as GamePrx;
            if(r == null)
            {
                GamePrxHelper h = new GamePrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static GamePrx uncheckedCast(Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            GamePrxHelper h = new GamePrxHelper();
            h.iceCopyFrom(bb);
            return h;
        }

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::Online::Game"
        };

        public static string ice_staticId()
        {
            return _ids[1];
        }

        #endregion

        #region Marshaling support

        public static void write(Ice.OutputStream ostr, GamePrx v)
        {
            ostr.writeProxy(v);
        }

        public static GamePrx read(Ice.InputStream istr)
        {
            Ice.ObjectPrx proxy = istr.readProxy();
            if(proxy != null)
            {
                GamePrxHelper result = new GamePrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
    public sealed class GameListHelper
    {
        public static void write(Ice.OutputStream ostr, Online.GamePrx[] v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    Online.GamePrxHelper.write(ostr, v[ix]);
                }
            }
        }

        public static Online.GamePrx[] read(Ice.InputStream istr)
        {
            Online.GamePrx[] v;
            {
                int szx = istr.readAndCheckSeqSize(2);
                v = new Online.GamePrx[szx];
                for(int ix = 0; ix < szx; ++ix)
                {
                    v[ix] = Online.GamePrxHelper.read(istr);
                }
            }
            return v;
        }
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
    [_System.Serializable]
    public sealed class GameHostPrxHelper : Ice.ObjectPrxHelperBase, GameHostPrx
    {
        public GameHostPrxHelper()
        {
        }

        public GameHostPrxHelper(_System.Runtime.Serialization.SerializationInfo info, _System.Runtime.Serialization.StreamingContext context) : base(info, context)
        {
        }

        #region Synchronous operations

        public Online.LobbyInfo GetLobbyInfo(Ice.OptionalContext context = new Ice.OptionalContext())
        {
            try
            {
                return _iceI_GetLobbyInfoAsync(context, null, _System.Threading.CancellationToken.None, true).Result;
            }
            catch(_System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void KickPlayer(string username, Ice.OptionalContext context = new Ice.OptionalContext())
        {
            try
            {
                _iceI_KickPlayerAsync(username, context, null, _System.Threading.CancellationToken.None, true).Wait();
            }
            catch(_System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void LockRoom(Ice.OptionalContext context = new Ice.OptionalContext())
        {
            try
            {
                _iceI_LockRoomAsync(context, null, _System.Threading.CancellationToken.None, true).Wait();
            }
            catch(_System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void StartGame(Ice.OptionalContext context = new Ice.OptionalContext())
        {
            try
            {
                _iceI_StartGameAsync(context, null, _System.Threading.CancellationToken.None, true).Wait();
            }
            catch(_System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void UnlockRoom(Ice.OptionalContext context = new Ice.OptionalContext())
        {
            try
            {
                _iceI_UnlockRoomAsync(context, null, _System.Threading.CancellationToken.None, true).Wait();
            }
            catch(_System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        #endregion

        #region Async Task operations

        public _System.Threading.Tasks.Task<Online.LobbyInfo> GetLobbyInfoAsync(Ice.OptionalContext context = new Ice.OptionalContext(), _System.IProgress<bool> progress = null, _System.Threading.CancellationToken cancel = new _System.Threading.CancellationToken())
        {
            return _iceI_GetLobbyInfoAsync(context, progress, cancel, false);
        }

        private _System.Threading.Tasks.Task<Online.LobbyInfo> _iceI_GetLobbyInfoAsync(Ice.OptionalContext context, _System.IProgress<bool> progress, _System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_GetLobbyInfo_name);
            var completed = new IceInternal.OperationTaskCompletionCallback<Online.LobbyInfo>(progress, cancel);
            _iceI_GetLobbyInfo(context, synchronous, completed);
            return completed.Task;
        }

        private const string _GetLobbyInfo_name = "GetLobbyInfo";

        private void _iceI_GetLobbyInfo(_System.Collections.Generic.Dictionary<string, string> context, bool synchronous, IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<Online.LobbyInfo>(completed);
            outAsync.invoke(
                _GetLobbyInfo_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (Ice.InputStream istr) =>
                {
                    Online.LobbyInfo ret = null;
                    ret = Online.LobbyInfo.ice_read(istr);
                    return ret;
                });
        }

        public _System.Threading.Tasks.Task KickPlayerAsync(string username, Ice.OptionalContext context = new Ice.OptionalContext(), _System.IProgress<bool> progress = null, _System.Threading.CancellationToken cancel = new _System.Threading.CancellationToken())
        {
            return _iceI_KickPlayerAsync(username, context, progress, cancel, false);
        }

        private _System.Threading.Tasks.Task _iceI_KickPlayerAsync(string iceP_username, Ice.OptionalContext context, _System.IProgress<bool> progress, _System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_KickPlayer(iceP_username, context, synchronous, completed);
            return completed.Task;
        }

        private const string _KickPlayer_name = "KickPlayer";

        private void _iceI_KickPlayer(string iceP_username, _System.Collections.Generic.Dictionary<string, string> context, bool synchronous, IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _KickPlayer_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ostr.writeString(iceP_username);
                });
        }

        public _System.Threading.Tasks.Task LockRoomAsync(Ice.OptionalContext context = new Ice.OptionalContext(), _System.IProgress<bool> progress = null, _System.Threading.CancellationToken cancel = new _System.Threading.CancellationToken())
        {
            return _iceI_LockRoomAsync(context, progress, cancel, false);
        }

        private _System.Threading.Tasks.Task _iceI_LockRoomAsync(Ice.OptionalContext context, _System.IProgress<bool> progress, _System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_LockRoom(context, synchronous, completed);
            return completed.Task;
        }

        private const string _LockRoom_name = "LockRoom";

        private void _iceI_LockRoom(_System.Collections.Generic.Dictionary<string, string> context, bool synchronous, IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _LockRoom_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous);
        }

        public _System.Threading.Tasks.Task StartGameAsync(Ice.OptionalContext context = new Ice.OptionalContext(), _System.IProgress<bool> progress = null, _System.Threading.CancellationToken cancel = new _System.Threading.CancellationToken())
        {
            return _iceI_StartGameAsync(context, progress, cancel, false);
        }

        private _System.Threading.Tasks.Task _iceI_StartGameAsync(Ice.OptionalContext context, _System.IProgress<bool> progress, _System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_StartGame(context, synchronous, completed);
            return completed.Task;
        }

        private const string _StartGame_name = "StartGame";

        private void _iceI_StartGame(_System.Collections.Generic.Dictionary<string, string> context, bool synchronous, IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _StartGame_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous);
        }

        public _System.Threading.Tasks.Task UnlockRoomAsync(Ice.OptionalContext context = new Ice.OptionalContext(), _System.IProgress<bool> progress = null, _System.Threading.CancellationToken cancel = new _System.Threading.CancellationToken())
        {
            return _iceI_UnlockRoomAsync(context, progress, cancel, false);
        }

        private _System.Threading.Tasks.Task _iceI_UnlockRoomAsync(Ice.OptionalContext context, _System.IProgress<bool> progress, _System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_UnlockRoom(context, synchronous, completed);
            return completed.Task;
        }

        private const string _UnlockRoom_name = "UnlockRoom";

        private void _iceI_UnlockRoom(_System.Collections.Generic.Dictionary<string, string> context, bool synchronous, IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _UnlockRoom_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous);
        }

        #endregion

        #region Asynchronous operations

        public Ice.AsyncResult<Online.Callback_Game_GetLobbyInfo> begin_GetLobbyInfo(Ice.OptionalContext context = new Ice.OptionalContext())
        {
            return begin_GetLobbyInfo(context, null, null, false);
        }

        public Ice.AsyncResult begin_GetLobbyInfo(Ice.AsyncCallback callback, object cookie)
        {
            return begin_GetLobbyInfo(new Ice.OptionalContext(), callback, cookie, false);
        }

        public Ice.AsyncResult begin_GetLobbyInfo(Ice.OptionalContext context, Ice.AsyncCallback callback, object cookie)
        {
            return begin_GetLobbyInfo(context, callback, cookie, false);
        }

        public Online.LobbyInfo end_GetLobbyInfo(Ice.AsyncResult asyncResult)
        {
            var resultI_ = IceInternal.AsyncResultI.check(asyncResult, this, _GetLobbyInfo_name);
            var outgoing_ = (IceInternal.OutgoingAsyncT<Online.LobbyInfo>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private Ice.AsyncResult<Online.Callback_Game_GetLobbyInfo> begin_GetLobbyInfo(_System.Collections.Generic.Dictionary<string, string> context, Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_GetLobbyInfo_name);
            var completed = new IceInternal.OperationAsyncResultCompletionCallback<Online.Callback_Game_GetLobbyInfo, Online.LobbyInfo>(
                (Online.Callback_Game_GetLobbyInfo cb, Online.LobbyInfo ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _GetLobbyInfo_name, cookie, completedCallback);
            _iceI_GetLobbyInfo(context, synchronous, completed);
            return completed;
        }

        public Ice.AsyncResult<Online.Callback_GameHost_KickPlayer> begin_KickPlayer(string username, Ice.OptionalContext context = new Ice.OptionalContext())
        {
            return begin_KickPlayer(username, context, null, null, false);
        }

        public Ice.AsyncResult begin_KickPlayer(string username, Ice.AsyncCallback callback, object cookie)
        {
            return begin_KickPlayer(username, new Ice.OptionalContext(), callback, cookie, false);
        }

        public Ice.AsyncResult begin_KickPlayer(string username, Ice.OptionalContext context, Ice.AsyncCallback callback, object cookie)
        {
            return begin_KickPlayer(username, context, callback, cookie, false);
        }

        public void end_KickPlayer(Ice.AsyncResult asyncResult)
        {
            var resultI_ = IceInternal.AsyncResultI.check(asyncResult, this, _KickPlayer_name);
            ((IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private Ice.AsyncResult<Online.Callback_GameHost_KickPlayer> begin_KickPlayer(string iceP_username, _System.Collections.Generic.Dictionary<string, string> context, Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new IceInternal.OperationAsyncResultCompletionCallback<Online.Callback_GameHost_KickPlayer, object>(
                (Online.Callback_GameHost_KickPlayer cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _KickPlayer_name, cookie, completedCallback);
            _iceI_KickPlayer(iceP_username, context, synchronous, completed);
            return completed;
        }

        public Ice.AsyncResult<Online.Callback_GameHost_LockRoom> begin_LockRoom(Ice.OptionalContext context = new Ice.OptionalContext())
        {
            return begin_LockRoom(context, null, null, false);
        }

        public Ice.AsyncResult begin_LockRoom(Ice.AsyncCallback callback, object cookie)
        {
            return begin_LockRoom(new Ice.OptionalContext(), callback, cookie, false);
        }

        public Ice.AsyncResult begin_LockRoom(Ice.OptionalContext context, Ice.AsyncCallback callback, object cookie)
        {
            return begin_LockRoom(context, callback, cookie, false);
        }

        public void end_LockRoom(Ice.AsyncResult asyncResult)
        {
            var resultI_ = IceInternal.AsyncResultI.check(asyncResult, this, _LockRoom_name);
            ((IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private Ice.AsyncResult<Online.Callback_GameHost_LockRoom> begin_LockRoom(_System.Collections.Generic.Dictionary<string, string> context, Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new IceInternal.OperationAsyncResultCompletionCallback<Online.Callback_GameHost_LockRoom, object>(
                (Online.Callback_GameHost_LockRoom cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _LockRoom_name, cookie, completedCallback);
            _iceI_LockRoom(context, synchronous, completed);
            return completed;
        }

        public Ice.AsyncResult<Online.Callback_GameHost_StartGame> begin_StartGame(Ice.OptionalContext context = new Ice.OptionalContext())
        {
            return begin_StartGame(context, null, null, false);
        }

        public Ice.AsyncResult begin_StartGame(Ice.AsyncCallback callback, object cookie)
        {
            return begin_StartGame(new Ice.OptionalContext(), callback, cookie, false);
        }

        public Ice.AsyncResult begin_StartGame(Ice.OptionalContext context, Ice.AsyncCallback callback, object cookie)
        {
            return begin_StartGame(context, callback, cookie, false);
        }

        public void end_StartGame(Ice.AsyncResult asyncResult)
        {
            var resultI_ = IceInternal.AsyncResultI.check(asyncResult, this, _StartGame_name);
            ((IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private Ice.AsyncResult<Online.Callback_GameHost_StartGame> begin_StartGame(_System.Collections.Generic.Dictionary<string, string> context, Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new IceInternal.OperationAsyncResultCompletionCallback<Online.Callback_GameHost_StartGame, object>(
                (Online.Callback_GameHost_StartGame cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _StartGame_name, cookie, completedCallback);
            _iceI_StartGame(context, synchronous, completed);
            return completed;
        }

        public Ice.AsyncResult<Online.Callback_GameHost_UnlockRoom> begin_UnlockRoom(Ice.OptionalContext context = new Ice.OptionalContext())
        {
            return begin_UnlockRoom(context, null, null, false);
        }

        public Ice.AsyncResult begin_UnlockRoom(Ice.AsyncCallback callback, object cookie)
        {
            return begin_UnlockRoom(new Ice.OptionalContext(), callback, cookie, false);
        }

        public Ice.AsyncResult begin_UnlockRoom(Ice.OptionalContext context, Ice.AsyncCallback callback, object cookie)
        {
            return begin_UnlockRoom(context, callback, cookie, false);
        }

        public void end_UnlockRoom(Ice.AsyncResult asyncResult)
        {
            var resultI_ = IceInternal.AsyncResultI.check(asyncResult, this, _UnlockRoom_name);
            ((IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private Ice.AsyncResult<Online.Callback_GameHost_UnlockRoom> begin_UnlockRoom(_System.Collections.Generic.Dictionary<string, string> context, Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new IceInternal.OperationAsyncResultCompletionCallback<Online.Callback_GameHost_UnlockRoom, object>(
                (Online.Callback_GameHost_UnlockRoom cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _UnlockRoom_name, cookie, completedCallback);
            _iceI_UnlockRoom(context, synchronous, completed);
            return completed;
        }

        #endregion

        #region Checked and unchecked cast operations

        public static GameHostPrx checkedCast(Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            GameHostPrx r = b as GameHostPrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                GameHostPrxHelper h = new GameHostPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static GameHostPrx checkedCast(Ice.ObjectPrx b, _System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            GameHostPrx r = b as GameHostPrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                GameHostPrxHelper h = new GameHostPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static GameHostPrx checkedCast(Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    GameHostPrxHelper h = new GameHostPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static GameHostPrx checkedCast(Ice.ObjectPrx b, string f, _System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    GameHostPrxHelper h = new GameHostPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static GameHostPrx uncheckedCast(Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            GameHostPrx r = b as GameHostPrx;
            if(r == null)
            {
                GameHostPrxHelper h = new GameHostPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static GameHostPrx uncheckedCast(Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            GameHostPrxHelper h = new GameHostPrxHelper();
            h.iceCopyFrom(bb);
            return h;
        }

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::Online::Game",
            "::Online::GameHost"
        };

        public static string ice_staticId()
        {
            return _ids[2];
        }

        #endregion

        #region Marshaling support

        public static void write(Ice.OutputStream ostr, GameHostPrx v)
        {
            ostr.writeProxy(v);
        }

        public static GameHostPrx read(Ice.InputStream istr)
        {
            Ice.ObjectPrx proxy = istr.readProxy();
            if(proxy != null)
            {
                GameHostPrxHelper result = new GameHostPrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
    [_System.Serializable]
    public sealed class ServerPrxHelper : Ice.ObjectPrxHelperBase, ServerPrx
    {
        public ServerPrxHelper()
        {
        }

        public ServerPrxHelper(_System.Runtime.Serialization.SerializationInfo info, _System.Runtime.Serialization.StreamingContext context) : base(info, context)
        {
        }

        #region Synchronous operations

        public void StartGame(Online.ClientPrx[] clientList, Ice.OptionalContext context = new Ice.OptionalContext())
        {
            try
            {
                _iceI_StartGameAsync(clientList, context, null, _System.Threading.CancellationToken.None, true).Wait();
            }
            catch(_System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        #endregion

        #region Async Task operations

        public _System.Threading.Tasks.Task StartGameAsync(Online.ClientPrx[] clientList, Ice.OptionalContext context = new Ice.OptionalContext(), _System.IProgress<bool> progress = null, _System.Threading.CancellationToken cancel = new _System.Threading.CancellationToken())
        {
            return _iceI_StartGameAsync(clientList, context, progress, cancel, false);
        }

        private _System.Threading.Tasks.Task _iceI_StartGameAsync(Online.ClientPrx[] iceP_clientList, Ice.OptionalContext context, _System.IProgress<bool> progress, _System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_StartGame(iceP_clientList, context, synchronous, completed);
            return completed.Task;
        }

        private const string _StartGame_name = "StartGame";

        private void _iceI_StartGame(Online.ClientPrx[] iceP_clientList, _System.Collections.Generic.Dictionary<string, string> context, bool synchronous, IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _StartGame_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    Online.ClientListHelper.write(ostr, iceP_clientList);
                });
        }

        #endregion

        #region Asynchronous operations

        public Ice.AsyncResult<Online.Callback_Server_StartGame> begin_StartGame(Online.ClientPrx[] clientList, Ice.OptionalContext context = new Ice.OptionalContext())
        {
            return begin_StartGame(clientList, context, null, null, false);
        }

        public Ice.AsyncResult begin_StartGame(Online.ClientPrx[] clientList, Ice.AsyncCallback callback, object cookie)
        {
            return begin_StartGame(clientList, new Ice.OptionalContext(), callback, cookie, false);
        }

        public Ice.AsyncResult begin_StartGame(Online.ClientPrx[] clientList, Ice.OptionalContext context, Ice.AsyncCallback callback, object cookie)
        {
            return begin_StartGame(clientList, context, callback, cookie, false);
        }

        public void end_StartGame(Ice.AsyncResult asyncResult)
        {
            var resultI_ = IceInternal.AsyncResultI.check(asyncResult, this, _StartGame_name);
            ((IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private Ice.AsyncResult<Online.Callback_Server_StartGame> begin_StartGame(Online.ClientPrx[] iceP_clientList, _System.Collections.Generic.Dictionary<string, string> context, Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new IceInternal.OperationAsyncResultCompletionCallback<Online.Callback_Server_StartGame, object>(
                (Online.Callback_Server_StartGame cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _StartGame_name, cookie, completedCallback);
            _iceI_StartGame(iceP_clientList, context, synchronous, completed);
            return completed;
        }

        #endregion

        #region Checked and unchecked cast operations

        public static ServerPrx checkedCast(Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            ServerPrx r = b as ServerPrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                ServerPrxHelper h = new ServerPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static ServerPrx checkedCast(Ice.ObjectPrx b, _System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            ServerPrx r = b as ServerPrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                ServerPrxHelper h = new ServerPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static ServerPrx checkedCast(Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    ServerPrxHelper h = new ServerPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static ServerPrx checkedCast(Ice.ObjectPrx b, string f, _System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    ServerPrxHelper h = new ServerPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static ServerPrx uncheckedCast(Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            ServerPrx r = b as ServerPrx;
            if(r == null)
            {
                ServerPrxHelper h = new ServerPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static ServerPrx uncheckedCast(Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            ServerPrxHelper h = new ServerPrxHelper();
            h.iceCopyFrom(bb);
            return h;
        }

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::Online::Server"
        };

        public static string ice_staticId()
        {
            return _ids[1];
        }

        #endregion

        #region Marshaling support

        public static void write(Ice.OutputStream ostr, ServerPrx v)
        {
            ostr.writeProxy(v);
        }

        public static ServerPrx read(Ice.InputStream istr)
        {
            Ice.ObjectPrx proxy = istr.readProxy();
            if(proxy != null)
            {
                ServerPrxHelper result = new ServerPrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
    [_System.Serializable]
    public sealed class PlayerPrxHelper : Ice.ObjectPrxHelperBase, PlayerPrx
    {
        public PlayerPrxHelper()
        {
        }

        public PlayerPrxHelper(_System.Runtime.Serialization.SerializationInfo info, _System.Runtime.Serialization.StreamingContext context) : base(info, context)
        {
        }

        #region Synchronous operations

        public Online.GameHostPrx CreateGame(Online.ServerPrx server, Ice.OptionalContext context = new Ice.OptionalContext())
        {
            try
            {
                return _iceI_CreateGameAsync(server, context, null, _System.Threading.CancellationToken.None, true).Result;
            }
            catch(_System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public Online.PlayerStats GetStats(Ice.OptionalContext context = new Ice.OptionalContext())
        {
            try
            {
                return _iceI_GetStatsAsync(context, null, _System.Threading.CancellationToken.None, true).Result;
            }
            catch(_System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public bool JoinGame(Online.ClientPrx client, Online.GamePrx game, Ice.OptionalContext context = new Ice.OptionalContext())
        {
            try
            {
                return _iceI_JoinGameAsync(client, game, context, null, _System.Threading.CancellationToken.None, true).Result;
            }
            catch(_System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void LeaveGame(Ice.OptionalContext context = new Ice.OptionalContext())
        {
            try
            {
                _iceI_LeaveGameAsync(context, null, _System.Threading.CancellationToken.None, true).Wait();
            }
            catch(_System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void LogOut(Ice.OptionalContext context = new Ice.OptionalContext())
        {
            try
            {
                _iceI_LogOutAsync(context, null, _System.Threading.CancellationToken.None, true).Wait();
            }
            catch(_System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        #endregion

        #region Async Task operations

        public _System.Threading.Tasks.Task<Online.GameHostPrx> CreateGameAsync(Online.ServerPrx server, Ice.OptionalContext context = new Ice.OptionalContext(), _System.IProgress<bool> progress = null, _System.Threading.CancellationToken cancel = new _System.Threading.CancellationToken())
        {
            return _iceI_CreateGameAsync(server, context, progress, cancel, false);
        }

        private _System.Threading.Tasks.Task<Online.GameHostPrx> _iceI_CreateGameAsync(Online.ServerPrx iceP_server, Ice.OptionalContext context, _System.IProgress<bool> progress, _System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_CreateGame_name);
            var completed = new IceInternal.OperationTaskCompletionCallback<Online.GameHostPrx>(progress, cancel);
            _iceI_CreateGame(iceP_server, context, synchronous, completed);
            return completed.Task;
        }

        private const string _CreateGame_name = "CreateGame";

        private void _iceI_CreateGame(Online.ServerPrx iceP_server, _System.Collections.Generic.Dictionary<string, string> context, bool synchronous, IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<Online.GameHostPrx>(completed);
            outAsync.invoke(
                _CreateGame_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    Online.ServerPrxHelper.write(ostr, iceP_server);
                },
                read: (Ice.InputStream istr) =>
                {
                    Online.GameHostPrx ret;
                    ret = Online.GameHostPrxHelper.read(istr);
                    return ret;
                });
        }

        public _System.Threading.Tasks.Task<Online.PlayerStats> GetStatsAsync(Ice.OptionalContext context = new Ice.OptionalContext(), _System.IProgress<bool> progress = null, _System.Threading.CancellationToken cancel = new _System.Threading.CancellationToken())
        {
            return _iceI_GetStatsAsync(context, progress, cancel, false);
        }

        private _System.Threading.Tasks.Task<Online.PlayerStats> _iceI_GetStatsAsync(Ice.OptionalContext context, _System.IProgress<bool> progress, _System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_GetStats_name);
            var completed = new IceInternal.OperationTaskCompletionCallback<Online.PlayerStats>(progress, cancel);
            _iceI_GetStats(context, synchronous, completed);
            return completed.Task;
        }

        private const string _GetStats_name = "GetStats";

        private void _iceI_GetStats(_System.Collections.Generic.Dictionary<string, string> context, bool synchronous, IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<Online.PlayerStats>(completed);
            outAsync.invoke(
                _GetStats_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (Ice.InputStream istr) =>
                {
                    Online.PlayerStats ret = null;
                    ret = Online.PlayerStats.ice_read(istr);
                    return ret;
                });
        }

        public _System.Threading.Tasks.Task<bool> JoinGameAsync(Online.ClientPrx client, Online.GamePrx game, Ice.OptionalContext context = new Ice.OptionalContext(), _System.IProgress<bool> progress = null, _System.Threading.CancellationToken cancel = new _System.Threading.CancellationToken())
        {
            return _iceI_JoinGameAsync(client, game, context, progress, cancel, false);
        }

        private _System.Threading.Tasks.Task<bool> _iceI_JoinGameAsync(Online.ClientPrx iceP_client, Online.GamePrx iceP_game, Ice.OptionalContext context, _System.IProgress<bool> progress, _System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_JoinGame_name);
            var completed = new IceInternal.OperationTaskCompletionCallback<bool>(progress, cancel);
            _iceI_JoinGame(iceP_client, iceP_game, context, synchronous, completed);
            return completed.Task;
        }

        private const string _JoinGame_name = "JoinGame";

        private void _iceI_JoinGame(Online.ClientPrx iceP_client, Online.GamePrx iceP_game, _System.Collections.Generic.Dictionary<string, string> context, bool synchronous, IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<bool>(completed);
            outAsync.invoke(
                _JoinGame_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    Online.ClientPrxHelper.write(ostr, iceP_client);
                    Online.GamePrxHelper.write(ostr, iceP_game);
                },
                read: (Ice.InputStream istr) =>
                {
                    bool ret;
                    ret = istr.readBool();
                    return ret;
                });
        }

        public _System.Threading.Tasks.Task LeaveGameAsync(Ice.OptionalContext context = new Ice.OptionalContext(), _System.IProgress<bool> progress = null, _System.Threading.CancellationToken cancel = new _System.Threading.CancellationToken())
        {
            return _iceI_LeaveGameAsync(context, progress, cancel, false);
        }

        private _System.Threading.Tasks.Task _iceI_LeaveGameAsync(Ice.OptionalContext context, _System.IProgress<bool> progress, _System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_LeaveGame(context, synchronous, completed);
            return completed.Task;
        }

        private const string _LeaveGame_name = "LeaveGame";

        private void _iceI_LeaveGame(_System.Collections.Generic.Dictionary<string, string> context, bool synchronous, IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _LeaveGame_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous);
        }

        public _System.Threading.Tasks.Task LogOutAsync(Ice.OptionalContext context = new Ice.OptionalContext(), _System.IProgress<bool> progress = null, _System.Threading.CancellationToken cancel = new _System.Threading.CancellationToken())
        {
            return _iceI_LogOutAsync(context, progress, cancel, false);
        }

        private _System.Threading.Tasks.Task _iceI_LogOutAsync(Ice.OptionalContext context, _System.IProgress<bool> progress, _System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_LogOut(context, synchronous, completed);
            return completed.Task;
        }

        private const string _LogOut_name = "LogOut";

        private void _iceI_LogOut(_System.Collections.Generic.Dictionary<string, string> context, bool synchronous, IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _LogOut_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous);
        }

        #endregion

        #region Asynchronous operations

        public Ice.AsyncResult<Online.Callback_Player_CreateGame> begin_CreateGame(Online.ServerPrx server, Ice.OptionalContext context = new Ice.OptionalContext())
        {
            return begin_CreateGame(server, context, null, null, false);
        }

        public Ice.AsyncResult begin_CreateGame(Online.ServerPrx server, Ice.AsyncCallback callback, object cookie)
        {
            return begin_CreateGame(server, new Ice.OptionalContext(), callback, cookie, false);
        }

        public Ice.AsyncResult begin_CreateGame(Online.ServerPrx server, Ice.OptionalContext context, Ice.AsyncCallback callback, object cookie)
        {
            return begin_CreateGame(server, context, callback, cookie, false);
        }

        public Online.GameHostPrx end_CreateGame(Ice.AsyncResult asyncResult)
        {
            var resultI_ = IceInternal.AsyncResultI.check(asyncResult, this, _CreateGame_name);
            var outgoing_ = (IceInternal.OutgoingAsyncT<Online.GameHostPrx>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private Ice.AsyncResult<Online.Callback_Player_CreateGame> begin_CreateGame(Online.ServerPrx iceP_server, _System.Collections.Generic.Dictionary<string, string> context, Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_CreateGame_name);
            var completed = new IceInternal.OperationAsyncResultCompletionCallback<Online.Callback_Player_CreateGame, Online.GameHostPrx>(
                (Online.Callback_Player_CreateGame cb, Online.GameHostPrx ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _CreateGame_name, cookie, completedCallback);
            _iceI_CreateGame(iceP_server, context, synchronous, completed);
            return completed;
        }

        public Ice.AsyncResult<Online.Callback_Player_GetStats> begin_GetStats(Ice.OptionalContext context = new Ice.OptionalContext())
        {
            return begin_GetStats(context, null, null, false);
        }

        public Ice.AsyncResult begin_GetStats(Ice.AsyncCallback callback, object cookie)
        {
            return begin_GetStats(new Ice.OptionalContext(), callback, cookie, false);
        }

        public Ice.AsyncResult begin_GetStats(Ice.OptionalContext context, Ice.AsyncCallback callback, object cookie)
        {
            return begin_GetStats(context, callback, cookie, false);
        }

        public Online.PlayerStats end_GetStats(Ice.AsyncResult asyncResult)
        {
            var resultI_ = IceInternal.AsyncResultI.check(asyncResult, this, _GetStats_name);
            var outgoing_ = (IceInternal.OutgoingAsyncT<Online.PlayerStats>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private Ice.AsyncResult<Online.Callback_Player_GetStats> begin_GetStats(_System.Collections.Generic.Dictionary<string, string> context, Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_GetStats_name);
            var completed = new IceInternal.OperationAsyncResultCompletionCallback<Online.Callback_Player_GetStats, Online.PlayerStats>(
                (Online.Callback_Player_GetStats cb, Online.PlayerStats ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _GetStats_name, cookie, completedCallback);
            _iceI_GetStats(context, synchronous, completed);
            return completed;
        }

        public Ice.AsyncResult<Online.Callback_Player_JoinGame> begin_JoinGame(Online.ClientPrx client, Online.GamePrx game, Ice.OptionalContext context = new Ice.OptionalContext())
        {
            return begin_JoinGame(client, game, context, null, null, false);
        }

        public Ice.AsyncResult begin_JoinGame(Online.ClientPrx client, Online.GamePrx game, Ice.AsyncCallback callback, object cookie)
        {
            return begin_JoinGame(client, game, new Ice.OptionalContext(), callback, cookie, false);
        }

        public Ice.AsyncResult begin_JoinGame(Online.ClientPrx client, Online.GamePrx game, Ice.OptionalContext context, Ice.AsyncCallback callback, object cookie)
        {
            return begin_JoinGame(client, game, context, callback, cookie, false);
        }

        public bool end_JoinGame(Ice.AsyncResult asyncResult)
        {
            var resultI_ = IceInternal.AsyncResultI.check(asyncResult, this, _JoinGame_name);
            var outgoing_ = (IceInternal.OutgoingAsyncT<bool>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private Ice.AsyncResult<Online.Callback_Player_JoinGame> begin_JoinGame(Online.ClientPrx iceP_client, Online.GamePrx iceP_game, _System.Collections.Generic.Dictionary<string, string> context, Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_JoinGame_name);
            var completed = new IceInternal.OperationAsyncResultCompletionCallback<Online.Callback_Player_JoinGame, bool>(
                (Online.Callback_Player_JoinGame cb, bool ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _JoinGame_name, cookie, completedCallback);
            _iceI_JoinGame(iceP_client, iceP_game, context, synchronous, completed);
            return completed;
        }

        public Ice.AsyncResult<Online.Callback_Player_LeaveGame> begin_LeaveGame(Ice.OptionalContext context = new Ice.OptionalContext())
        {
            return begin_LeaveGame(context, null, null, false);
        }

        public Ice.AsyncResult begin_LeaveGame(Ice.AsyncCallback callback, object cookie)
        {
            return begin_LeaveGame(new Ice.OptionalContext(), callback, cookie, false);
        }

        public Ice.AsyncResult begin_LeaveGame(Ice.OptionalContext context, Ice.AsyncCallback callback, object cookie)
        {
            return begin_LeaveGame(context, callback, cookie, false);
        }

        public void end_LeaveGame(Ice.AsyncResult asyncResult)
        {
            var resultI_ = IceInternal.AsyncResultI.check(asyncResult, this, _LeaveGame_name);
            ((IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private Ice.AsyncResult<Online.Callback_Player_LeaveGame> begin_LeaveGame(_System.Collections.Generic.Dictionary<string, string> context, Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new IceInternal.OperationAsyncResultCompletionCallback<Online.Callback_Player_LeaveGame, object>(
                (Online.Callback_Player_LeaveGame cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _LeaveGame_name, cookie, completedCallback);
            _iceI_LeaveGame(context, synchronous, completed);
            return completed;
        }

        public Ice.AsyncResult<Online.Callback_Player_LogOut> begin_LogOut(Ice.OptionalContext context = new Ice.OptionalContext())
        {
            return begin_LogOut(context, null, null, false);
        }

        public Ice.AsyncResult begin_LogOut(Ice.AsyncCallback callback, object cookie)
        {
            return begin_LogOut(new Ice.OptionalContext(), callback, cookie, false);
        }

        public Ice.AsyncResult begin_LogOut(Ice.OptionalContext context, Ice.AsyncCallback callback, object cookie)
        {
            return begin_LogOut(context, callback, cookie, false);
        }

        public void end_LogOut(Ice.AsyncResult asyncResult)
        {
            var resultI_ = IceInternal.AsyncResultI.check(asyncResult, this, _LogOut_name);
            ((IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private Ice.AsyncResult<Online.Callback_Player_LogOut> begin_LogOut(_System.Collections.Generic.Dictionary<string, string> context, Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new IceInternal.OperationAsyncResultCompletionCallback<Online.Callback_Player_LogOut, object>(
                (Online.Callback_Player_LogOut cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _LogOut_name, cookie, completedCallback);
            _iceI_LogOut(context, synchronous, completed);
            return completed;
        }

        #endregion

        #region Checked and unchecked cast operations

        public static PlayerPrx checkedCast(Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            PlayerPrx r = b as PlayerPrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                PlayerPrxHelper h = new PlayerPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static PlayerPrx checkedCast(Ice.ObjectPrx b, _System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            PlayerPrx r = b as PlayerPrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                PlayerPrxHelper h = new PlayerPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static PlayerPrx checkedCast(Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    PlayerPrxHelper h = new PlayerPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static PlayerPrx checkedCast(Ice.ObjectPrx b, string f, _System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    PlayerPrxHelper h = new PlayerPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static PlayerPrx uncheckedCast(Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            PlayerPrx r = b as PlayerPrx;
            if(r == null)
            {
                PlayerPrxHelper h = new PlayerPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static PlayerPrx uncheckedCast(Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            PlayerPrxHelper h = new PlayerPrxHelper();
            h.iceCopyFrom(bb);
            return h;
        }

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::Online::Player"
        };

        public static string ice_staticId()
        {
            return _ids[1];
        }

        #endregion

        #region Marshaling support

        public static void write(Ice.OutputStream ostr, PlayerPrx v)
        {
            ostr.writeProxy(v);
        }

        public static PlayerPrx read(Ice.InputStream istr)
        {
            Ice.ObjectPrx proxy = istr.readProxy();
            if(proxy != null)
            {
                PlayerPrxHelper result = new PlayerPrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
    [_System.Serializable]
    public sealed class LobbyListenerPrxHelper : Ice.ObjectPrxHelperBase, LobbyListenerPrx
    {
        public LobbyListenerPrxHelper()
        {
        }

        public LobbyListenerPrxHelper(_System.Runtime.Serialization.SerializationInfo info, _System.Runtime.Serialization.StreamingContext context) : base(info, context)
        {
        }

        #region Synchronous operations

        public bool Ping(Ice.OptionalContext context = new Ice.OptionalContext())
        {
            try
            {
                return _iceI_PingAsync(context, null, _System.Threading.CancellationToken.None, true).Result;
            }
            catch(_System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void Update(Online.GamePrx[] list, Ice.OptionalContext context = new Ice.OptionalContext())
        {
            try
            {
                _iceI_UpdateAsync(list, context, null, _System.Threading.CancellationToken.None, true).Wait();
            }
            catch(_System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        #endregion

        #region Async Task operations

        public _System.Threading.Tasks.Task<bool> PingAsync(Ice.OptionalContext context = new Ice.OptionalContext(), _System.IProgress<bool> progress = null, _System.Threading.CancellationToken cancel = new _System.Threading.CancellationToken())
        {
            return _iceI_PingAsync(context, progress, cancel, false);
        }

        private _System.Threading.Tasks.Task<bool> _iceI_PingAsync(Ice.OptionalContext context, _System.IProgress<bool> progress, _System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_Ping_name);
            var completed = new IceInternal.OperationTaskCompletionCallback<bool>(progress, cancel);
            _iceI_Ping(context, synchronous, completed);
            return completed.Task;
        }

        private const string _Ping_name = "Ping";

        private void _iceI_Ping(_System.Collections.Generic.Dictionary<string, string> context, bool synchronous, IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<bool>(completed);
            outAsync.invoke(
                _Ping_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (Ice.InputStream istr) =>
                {
                    bool ret;
                    ret = istr.readBool();
                    return ret;
                });
        }

        public _System.Threading.Tasks.Task UpdateAsync(Online.GamePrx[] list, Ice.OptionalContext context = new Ice.OptionalContext(), _System.IProgress<bool> progress = null, _System.Threading.CancellationToken cancel = new _System.Threading.CancellationToken())
        {
            return _iceI_UpdateAsync(list, context, progress, cancel, false);
        }

        private _System.Threading.Tasks.Task _iceI_UpdateAsync(Online.GamePrx[] iceP_list, Ice.OptionalContext context, _System.IProgress<bool> progress, _System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_Update(iceP_list, context, synchronous, completed);
            return completed.Task;
        }

        private const string _Update_name = "Update";

        private void _iceI_Update(Online.GamePrx[] iceP_list, _System.Collections.Generic.Dictionary<string, string> context, bool synchronous, IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _Update_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    Online.GameListHelper.write(ostr, iceP_list);
                });
        }

        #endregion

        #region Asynchronous operations

        public Ice.AsyncResult<Online.Callback_LobbyListener_Ping> begin_Ping(Ice.OptionalContext context = new Ice.OptionalContext())
        {
            return begin_Ping(context, null, null, false);
        }

        public Ice.AsyncResult begin_Ping(Ice.AsyncCallback callback, object cookie)
        {
            return begin_Ping(new Ice.OptionalContext(), callback, cookie, false);
        }

        public Ice.AsyncResult begin_Ping(Ice.OptionalContext context, Ice.AsyncCallback callback, object cookie)
        {
            return begin_Ping(context, callback, cookie, false);
        }

        public bool end_Ping(Ice.AsyncResult asyncResult)
        {
            var resultI_ = IceInternal.AsyncResultI.check(asyncResult, this, _Ping_name);
            var outgoing_ = (IceInternal.OutgoingAsyncT<bool>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private Ice.AsyncResult<Online.Callback_LobbyListener_Ping> begin_Ping(_System.Collections.Generic.Dictionary<string, string> context, Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_Ping_name);
            var completed = new IceInternal.OperationAsyncResultCompletionCallback<Online.Callback_LobbyListener_Ping, bool>(
                (Online.Callback_LobbyListener_Ping cb, bool ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _Ping_name, cookie, completedCallback);
            _iceI_Ping(context, synchronous, completed);
            return completed;
        }

        public Ice.AsyncResult<Online.Callback_LobbyListener_Update> begin_Update(Online.GamePrx[] list, Ice.OptionalContext context = new Ice.OptionalContext())
        {
            return begin_Update(list, context, null, null, false);
        }

        public Ice.AsyncResult begin_Update(Online.GamePrx[] list, Ice.AsyncCallback callback, object cookie)
        {
            return begin_Update(list, new Ice.OptionalContext(), callback, cookie, false);
        }

        public Ice.AsyncResult begin_Update(Online.GamePrx[] list, Ice.OptionalContext context, Ice.AsyncCallback callback, object cookie)
        {
            return begin_Update(list, context, callback, cookie, false);
        }

        public void end_Update(Ice.AsyncResult asyncResult)
        {
            var resultI_ = IceInternal.AsyncResultI.check(asyncResult, this, _Update_name);
            ((IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private Ice.AsyncResult<Online.Callback_LobbyListener_Update> begin_Update(Online.GamePrx[] iceP_list, _System.Collections.Generic.Dictionary<string, string> context, Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new IceInternal.OperationAsyncResultCompletionCallback<Online.Callback_LobbyListener_Update, object>(
                (Online.Callback_LobbyListener_Update cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _Update_name, cookie, completedCallback);
            _iceI_Update(iceP_list, context, synchronous, completed);
            return completed;
        }

        #endregion

        #region Checked and unchecked cast operations

        public static LobbyListenerPrx checkedCast(Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            LobbyListenerPrx r = b as LobbyListenerPrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                LobbyListenerPrxHelper h = new LobbyListenerPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static LobbyListenerPrx checkedCast(Ice.ObjectPrx b, _System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            LobbyListenerPrx r = b as LobbyListenerPrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                LobbyListenerPrxHelper h = new LobbyListenerPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static LobbyListenerPrx checkedCast(Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    LobbyListenerPrxHelper h = new LobbyListenerPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static LobbyListenerPrx checkedCast(Ice.ObjectPrx b, string f, _System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    LobbyListenerPrxHelper h = new LobbyListenerPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static LobbyListenerPrx uncheckedCast(Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            LobbyListenerPrx r = b as LobbyListenerPrx;
            if(r == null)
            {
                LobbyListenerPrxHelper h = new LobbyListenerPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static LobbyListenerPrx uncheckedCast(Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            LobbyListenerPrxHelper h = new LobbyListenerPrxHelper();
            h.iceCopyFrom(bb);
            return h;
        }

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::Online::LobbyListener"
        };

        public static string ice_staticId()
        {
            return _ids[1];
        }

        #endregion

        #region Marshaling support

        public static void write(Ice.OutputStream ostr, LobbyListenerPrx v)
        {
            ostr.writeProxy(v);
        }

        public static LobbyListenerPrx read(Ice.InputStream istr)
        {
            Ice.ObjectPrx proxy = istr.readProxy();
            if(proxy != null)
            {
                LobbyListenerPrxHelper result = new LobbyListenerPrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
    [_System.Serializable]
    public sealed class PlayerRegisterPrxHelper : Ice.ObjectPrxHelperBase, PlayerRegisterPrx
    {
        public PlayerRegisterPrxHelper()
        {
        }

        public PlayerRegisterPrxHelper(_System.Runtime.Serialization.SerializationInfo info, _System.Runtime.Serialization.StreamingContext context) : base(info, context)
        {
        }

        #region Synchronous operations

        public Online.PlayerPrx CreateNew(string username, string password, Ice.OptionalContext context = new Ice.OptionalContext())
        {
            try
            {
                return _iceI_CreateNewAsync(username, password, context, null, _System.Threading.CancellationToken.None, true).Result;
            }
            catch(_System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public Online.PlayerPrx Login(string username, string password, Ice.OptionalContext context = new Ice.OptionalContext())
        {
            try
            {
                return _iceI_LoginAsync(username, password, context, null, _System.Threading.CancellationToken.None, true).Result;
            }
            catch(_System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        #endregion

        #region Async Task operations

        public _System.Threading.Tasks.Task<Online.PlayerPrx> CreateNewAsync(string username, string password, Ice.OptionalContext context = new Ice.OptionalContext(), _System.IProgress<bool> progress = null, _System.Threading.CancellationToken cancel = new _System.Threading.CancellationToken())
        {
            return _iceI_CreateNewAsync(username, password, context, progress, cancel, false);
        }

        private _System.Threading.Tasks.Task<Online.PlayerPrx> _iceI_CreateNewAsync(string iceP_username, string iceP_password, Ice.OptionalContext context, _System.IProgress<bool> progress, _System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_CreateNew_name);
            var completed = new IceInternal.OperationTaskCompletionCallback<Online.PlayerPrx>(progress, cancel);
            _iceI_CreateNew(iceP_username, iceP_password, context, synchronous, completed);
            return completed.Task;
        }

        private const string _CreateNew_name = "CreateNew";

        private void _iceI_CreateNew(string iceP_username, string iceP_password, _System.Collections.Generic.Dictionary<string, string> context, bool synchronous, IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<Online.PlayerPrx>(completed);
            outAsync.invoke(
                _CreateNew_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ostr.writeString(iceP_username);
                    ostr.writeString(iceP_password);
                },
                read: (Ice.InputStream istr) =>
                {
                    Online.PlayerPrx ret;
                    ret = Online.PlayerPrxHelper.read(istr);
                    return ret;
                });
        }

        public _System.Threading.Tasks.Task<Online.PlayerPrx> LoginAsync(string username, string password, Ice.OptionalContext context = new Ice.OptionalContext(), _System.IProgress<bool> progress = null, _System.Threading.CancellationToken cancel = new _System.Threading.CancellationToken())
        {
            return _iceI_LoginAsync(username, password, context, progress, cancel, false);
        }

        private _System.Threading.Tasks.Task<Online.PlayerPrx> _iceI_LoginAsync(string iceP_username, string iceP_password, Ice.OptionalContext context, _System.IProgress<bool> progress, _System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_Login_name);
            var completed = new IceInternal.OperationTaskCompletionCallback<Online.PlayerPrx>(progress, cancel);
            _iceI_Login(iceP_username, iceP_password, context, synchronous, completed);
            return completed.Task;
        }

        private const string _Login_name = "Login";

        private void _iceI_Login(string iceP_username, string iceP_password, _System.Collections.Generic.Dictionary<string, string> context, bool synchronous, IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<Online.PlayerPrx>(completed);
            outAsync.invoke(
                _Login_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ostr.writeString(iceP_username);
                    ostr.writeString(iceP_password);
                },
                read: (Ice.InputStream istr) =>
                {
                    Online.PlayerPrx ret;
                    ret = Online.PlayerPrxHelper.read(istr);
                    return ret;
                });
        }

        #endregion

        #region Asynchronous operations

        public Ice.AsyncResult<Online.Callback_PlayerRegister_CreateNew> begin_CreateNew(string username, string password, Ice.OptionalContext context = new Ice.OptionalContext())
        {
            return begin_CreateNew(username, password, context, null, null, false);
        }

        public Ice.AsyncResult begin_CreateNew(string username, string password, Ice.AsyncCallback callback, object cookie)
        {
            return begin_CreateNew(username, password, new Ice.OptionalContext(), callback, cookie, false);
        }

        public Ice.AsyncResult begin_CreateNew(string username, string password, Ice.OptionalContext context, Ice.AsyncCallback callback, object cookie)
        {
            return begin_CreateNew(username, password, context, callback, cookie, false);
        }

        public Online.PlayerPrx end_CreateNew(Ice.AsyncResult asyncResult)
        {
            var resultI_ = IceInternal.AsyncResultI.check(asyncResult, this, _CreateNew_name);
            var outgoing_ = (IceInternal.OutgoingAsyncT<Online.PlayerPrx>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private Ice.AsyncResult<Online.Callback_PlayerRegister_CreateNew> begin_CreateNew(string iceP_username, string iceP_password, _System.Collections.Generic.Dictionary<string, string> context, Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_CreateNew_name);
            var completed = new IceInternal.OperationAsyncResultCompletionCallback<Online.Callback_PlayerRegister_CreateNew, Online.PlayerPrx>(
                (Online.Callback_PlayerRegister_CreateNew cb, Online.PlayerPrx ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _CreateNew_name, cookie, completedCallback);
            _iceI_CreateNew(iceP_username, iceP_password, context, synchronous, completed);
            return completed;
        }

        public Ice.AsyncResult<Online.Callback_PlayerRegister_Login> begin_Login(string username, string password, Ice.OptionalContext context = new Ice.OptionalContext())
        {
            return begin_Login(username, password, context, null, null, false);
        }

        public Ice.AsyncResult begin_Login(string username, string password, Ice.AsyncCallback callback, object cookie)
        {
            return begin_Login(username, password, new Ice.OptionalContext(), callback, cookie, false);
        }

        public Ice.AsyncResult begin_Login(string username, string password, Ice.OptionalContext context, Ice.AsyncCallback callback, object cookie)
        {
            return begin_Login(username, password, context, callback, cookie, false);
        }

        public Online.PlayerPrx end_Login(Ice.AsyncResult asyncResult)
        {
            var resultI_ = IceInternal.AsyncResultI.check(asyncResult, this, _Login_name);
            var outgoing_ = (IceInternal.OutgoingAsyncT<Online.PlayerPrx>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private Ice.AsyncResult<Online.Callback_PlayerRegister_Login> begin_Login(string iceP_username, string iceP_password, _System.Collections.Generic.Dictionary<string, string> context, Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_Login_name);
            var completed = new IceInternal.OperationAsyncResultCompletionCallback<Online.Callback_PlayerRegister_Login, Online.PlayerPrx>(
                (Online.Callback_PlayerRegister_Login cb, Online.PlayerPrx ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _Login_name, cookie, completedCallback);
            _iceI_Login(iceP_username, iceP_password, context, synchronous, completed);
            return completed;
        }

        #endregion

        #region Checked and unchecked cast operations

        public static PlayerRegisterPrx checkedCast(Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            PlayerRegisterPrx r = b as PlayerRegisterPrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                PlayerRegisterPrxHelper h = new PlayerRegisterPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static PlayerRegisterPrx checkedCast(Ice.ObjectPrx b, _System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            PlayerRegisterPrx r = b as PlayerRegisterPrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                PlayerRegisterPrxHelper h = new PlayerRegisterPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static PlayerRegisterPrx checkedCast(Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    PlayerRegisterPrxHelper h = new PlayerRegisterPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static PlayerRegisterPrx checkedCast(Ice.ObjectPrx b, string f, _System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    PlayerRegisterPrxHelper h = new PlayerRegisterPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static PlayerRegisterPrx uncheckedCast(Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            PlayerRegisterPrx r = b as PlayerRegisterPrx;
            if(r == null)
            {
                PlayerRegisterPrxHelper h = new PlayerRegisterPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static PlayerRegisterPrx uncheckedCast(Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            PlayerRegisterPrxHelper h = new PlayerRegisterPrxHelper();
            h.iceCopyFrom(bb);
            return h;
        }

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::Online::PlayerRegister"
        };

        public static string ice_staticId()
        {
            return _ids[1];
        }

        #endregion

        #region Marshaling support

        public static void write(Ice.OutputStream ostr, PlayerRegisterPrx v)
        {
            ostr.writeProxy(v);
        }

        public static PlayerRegisterPrx read(Ice.InputStream istr)
        {
            Ice.ObjectPrx proxy = istr.readProxy();
            if(proxy != null)
            {
                PlayerRegisterPrxHelper result = new PlayerRegisterPrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
    [_System.Serializable]
    public sealed class GameRegisterPrxHelper : Ice.ObjectPrxHelperBase, GameRegisterPrx
    {
        public GameRegisterPrxHelper()
        {
        }

        public GameRegisterPrxHelper(_System.Runtime.Serialization.SerializationInfo info, _System.Runtime.Serialization.StreamingContext context) : base(info, context)
        {
        }

        #region Synchronous operations

        public Online.PlayerRegisterPrx Connect(Online.LobbyListenerPrx listener, Ice.OptionalContext context = new Ice.OptionalContext())
        {
            try
            {
                return _iceI_ConnectAsync(listener, context, null, _System.Threading.CancellationToken.None, true).Result;
            }
            catch(_System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        #endregion

        #region Async Task operations

        public _System.Threading.Tasks.Task<Online.PlayerRegisterPrx> ConnectAsync(Online.LobbyListenerPrx listener, Ice.OptionalContext context = new Ice.OptionalContext(), _System.IProgress<bool> progress = null, _System.Threading.CancellationToken cancel = new _System.Threading.CancellationToken())
        {
            return _iceI_ConnectAsync(listener, context, progress, cancel, false);
        }

        private _System.Threading.Tasks.Task<Online.PlayerRegisterPrx> _iceI_ConnectAsync(Online.LobbyListenerPrx iceP_listener, Ice.OptionalContext context, _System.IProgress<bool> progress, _System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_Connect_name);
            var completed = new IceInternal.OperationTaskCompletionCallback<Online.PlayerRegisterPrx>(progress, cancel);
            _iceI_Connect(iceP_listener, context, synchronous, completed);
            return completed.Task;
        }

        private const string _Connect_name = "Connect";

        private void _iceI_Connect(Online.LobbyListenerPrx iceP_listener, _System.Collections.Generic.Dictionary<string, string> context, bool synchronous, IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<Online.PlayerRegisterPrx>(completed);
            outAsync.invoke(
                _Connect_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    Online.LobbyListenerPrxHelper.write(ostr, iceP_listener);
                },
                read: (Ice.InputStream istr) =>
                {
                    Online.PlayerRegisterPrx ret;
                    ret = Online.PlayerRegisterPrxHelper.read(istr);
                    return ret;
                });
        }

        #endregion

        #region Asynchronous operations

        public Ice.AsyncResult<Online.Callback_GameRegister_Connect> begin_Connect(Online.LobbyListenerPrx listener, Ice.OptionalContext context = new Ice.OptionalContext())
        {
            return begin_Connect(listener, context, null, null, false);
        }

        public Ice.AsyncResult begin_Connect(Online.LobbyListenerPrx listener, Ice.AsyncCallback callback, object cookie)
        {
            return begin_Connect(listener, new Ice.OptionalContext(), callback, cookie, false);
        }

        public Ice.AsyncResult begin_Connect(Online.LobbyListenerPrx listener, Ice.OptionalContext context, Ice.AsyncCallback callback, object cookie)
        {
            return begin_Connect(listener, context, callback, cookie, false);
        }

        public Online.PlayerRegisterPrx end_Connect(Ice.AsyncResult asyncResult)
        {
            var resultI_ = IceInternal.AsyncResultI.check(asyncResult, this, _Connect_name);
            var outgoing_ = (IceInternal.OutgoingAsyncT<Online.PlayerRegisterPrx>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private Ice.AsyncResult<Online.Callback_GameRegister_Connect> begin_Connect(Online.LobbyListenerPrx iceP_listener, _System.Collections.Generic.Dictionary<string, string> context, Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_Connect_name);
            var completed = new IceInternal.OperationAsyncResultCompletionCallback<Online.Callback_GameRegister_Connect, Online.PlayerRegisterPrx>(
                (Online.Callback_GameRegister_Connect cb, Online.PlayerRegisterPrx ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _Connect_name, cookie, completedCallback);
            _iceI_Connect(iceP_listener, context, synchronous, completed);
            return completed;
        }

        #endregion

        #region Checked and unchecked cast operations

        public static GameRegisterPrx checkedCast(Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            GameRegisterPrx r = b as GameRegisterPrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                GameRegisterPrxHelper h = new GameRegisterPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static GameRegisterPrx checkedCast(Ice.ObjectPrx b, _System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            GameRegisterPrx r = b as GameRegisterPrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                GameRegisterPrxHelper h = new GameRegisterPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static GameRegisterPrx checkedCast(Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    GameRegisterPrxHelper h = new GameRegisterPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static GameRegisterPrx checkedCast(Ice.ObjectPrx b, string f, _System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    GameRegisterPrxHelper h = new GameRegisterPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static GameRegisterPrx uncheckedCast(Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            GameRegisterPrx r = b as GameRegisterPrx;
            if(r == null)
            {
                GameRegisterPrxHelper h = new GameRegisterPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static GameRegisterPrx uncheckedCast(Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            GameRegisterPrxHelper h = new GameRegisterPrxHelper();
            h.iceCopyFrom(bb);
            return h;
        }

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::Online::GameRegister"
        };

        public static string ice_staticId()
        {
            return _ids[1];
        }

        #endregion

        #region Marshaling support

        public static void write(Ice.OutputStream ostr, GameRegisterPrx v)
        {
            ostr.writeProxy(v);
        }

        public static GameRegisterPrx read(Ice.InputStream istr)
        {
            Ice.ObjectPrx proxy = istr.readProxy();
            if(proxy != null)
            {
                GameRegisterPrxHelper result = new GameRegisterPrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }
}

namespace Online
{
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
    public abstract class ClientDisp_ : Ice.ObjectImpl, Client
    {
        #region Slice operations

        public abstract void GetInput(Ice.Current current = null);

        public abstract void Update(Online.Command[] commandList, Ice.Current current = null);

        public abstract void Notify(Ice.Current current = null);

        public abstract void NotifyKicked(Ice.Current current = null);

        public abstract Online.ServerPrx MakeHost(Ice.Current current = null);

        #endregion

        #region Slice type-related members

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::Online::Client"
        };

        public override bool ice_isA(string s, Ice.Current current = null)
        {
            return _System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids(Ice.Current current = null)
        {
            return _ids;
        }

        public override string ice_id(Ice.Current current = null)
        {
            return _ids[1];
        }

        public static new string ice_staticId()
        {
            return _ids[1];
        }

        #endregion

        #region Operation dispatch

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static _System.Threading.Tasks.Task<Ice.OutputStream>
        iceD_GetInput(Client obj, IceInternal.Incoming inS, Ice.Current current)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            obj.GetInput(current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static _System.Threading.Tasks.Task<Ice.OutputStream>
        iceD_Update(Client obj, IceInternal.Incoming inS, Ice.Current current)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            Online.Command[] iceP_commandList;
            iceP_commandList = Online.CommandListHelper.read(istr);
            istr.readPendingValues();
            inS.endReadParams();
            obj.Update(iceP_commandList, current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static _System.Threading.Tasks.Task<Ice.OutputStream>
        iceD_Notify(Client obj, IceInternal.Incoming inS, Ice.Current current)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            obj.Notify(current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static _System.Threading.Tasks.Task<Ice.OutputStream>
        iceD_NotifyKicked(Client obj, IceInternal.Incoming inS, Ice.Current current)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            obj.NotifyKicked(current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static _System.Threading.Tasks.Task<Ice.OutputStream>
        iceD_MakeHost(Client obj, IceInternal.Incoming inS, Ice.Current current)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            var ret = obj.MakeHost(current);
            var ostr = inS.startWriteParams();
            Online.ServerPrxHelper.write(ostr, ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        private static readonly string[] _all =
        {
            "GetInput",
            "MakeHost",
            "Notify",
            "NotifyKicked",
            "Update",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping"
        };

        public override _System.Threading.Tasks.Task<Ice.OutputStream>
        iceDispatch(IceInternal.Incoming inS, Ice.Current current)
        {
            int pos = _System.Array.BinarySearch(_all, current.operation, IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return iceD_GetInput(this, inS, current);
                }
                case 1:
                {
                    return iceD_MakeHost(this, inS, current);
                }
                case 2:
                {
                    return iceD_Notify(this, inS, current);
                }
                case 3:
                {
                    return iceD_NotifyKicked(this, inS, current);
                }
                case 4:
                {
                    return iceD_Update(this, inS, current);
                }
                case 5:
                {
                    return Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                }
                case 6:
                {
                    return Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                }
                case 7:
                {
                    return Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                }
                case 8:
                {
                    return Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                }
            }

            _System.Diagnostics.Debug.Assert(false);
            throw new Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        #endregion
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
    public abstract class GameDisp_ : Ice.ObjectImpl, Game
    {
        #region Slice operations

        public abstract Online.LobbyInfo GetLobbyInfo(Ice.Current current = null);

        #endregion

        #region Slice type-related members

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::Online::Game"
        };

        public override bool ice_isA(string s, Ice.Current current = null)
        {
            return _System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids(Ice.Current current = null)
        {
            return _ids;
        }

        public override string ice_id(Ice.Current current = null)
        {
            return _ids[1];
        }

        public static new string ice_staticId()
        {
            return _ids[1];
        }

        #endregion

        #region Operation dispatch

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static _System.Threading.Tasks.Task<Ice.OutputStream>
        iceD_GetLobbyInfo(Game obj, IceInternal.Incoming inS, Ice.Current current)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            var ret = obj.GetLobbyInfo(current);
            var ostr = inS.startWriteParams();
            Online.LobbyInfo.ice_write(ostr, ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        private static readonly string[] _all =
        {
            "GetLobbyInfo",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping"
        };

        public override _System.Threading.Tasks.Task<Ice.OutputStream>
        iceDispatch(IceInternal.Incoming inS, Ice.Current current)
        {
            int pos = _System.Array.BinarySearch(_all, current.operation, IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return iceD_GetLobbyInfo(this, inS, current);
                }
                case 1:
                {
                    return Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                }
                case 2:
                {
                    return Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                }
                case 3:
                {
                    return Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                }
                case 4:
                {
                    return Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                }
            }

            _System.Diagnostics.Debug.Assert(false);
            throw new Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        #endregion
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
    public abstract class GameHostDisp_ : Ice.ObjectImpl, GameHost
    {
        #region Slice operations

        public abstract void StartGame(Ice.Current current = null);

        public abstract void KickPlayer(string username, Ice.Current current = null);

        public abstract void LockRoom(Ice.Current current = null);

        public abstract void UnlockRoom(Ice.Current current = null);

        #endregion

        #region Inherited Slice operations

        public abstract Online.LobbyInfo GetLobbyInfo(Ice.Current current = null);

        #endregion

        #region Slice type-related members

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::Online::Game",
            "::Online::GameHost"
        };

        public override bool ice_isA(string s, Ice.Current current = null)
        {
            return _System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids(Ice.Current current = null)
        {
            return _ids;
        }

        public override string ice_id(Ice.Current current = null)
        {
            return _ids[2];
        }

        public static new string ice_staticId()
        {
            return _ids[2];
        }

        #endregion

        #region Operation dispatch

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static _System.Threading.Tasks.Task<Ice.OutputStream>
        iceD_StartGame(GameHost obj, IceInternal.Incoming inS, Ice.Current current)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            obj.StartGame(current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static _System.Threading.Tasks.Task<Ice.OutputStream>
        iceD_KickPlayer(GameHost obj, IceInternal.Incoming inS, Ice.Current current)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            string iceP_username;
            iceP_username = istr.readString();
            inS.endReadParams();
            obj.KickPlayer(iceP_username, current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static _System.Threading.Tasks.Task<Ice.OutputStream>
        iceD_LockRoom(GameHost obj, IceInternal.Incoming inS, Ice.Current current)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            obj.LockRoom(current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static _System.Threading.Tasks.Task<Ice.OutputStream>
        iceD_UnlockRoom(GameHost obj, IceInternal.Incoming inS, Ice.Current current)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            obj.UnlockRoom(current);
            return inS.setResult(inS.writeEmptyParams());
        }

        private static readonly string[] _all =
        {
            "GetLobbyInfo",
            "KickPlayer",
            "LockRoom",
            "StartGame",
            "UnlockRoom",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping"
        };

        public override _System.Threading.Tasks.Task<Ice.OutputStream>
        iceDispatch(IceInternal.Incoming inS, Ice.Current current)
        {
            int pos = _System.Array.BinarySearch(_all, current.operation, IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return Online.GameDisp_.iceD_GetLobbyInfo(this, inS, current);
                }
                case 1:
                {
                    return iceD_KickPlayer(this, inS, current);
                }
                case 2:
                {
                    return iceD_LockRoom(this, inS, current);
                }
                case 3:
                {
                    return iceD_StartGame(this, inS, current);
                }
                case 4:
                {
                    return iceD_UnlockRoom(this, inS, current);
                }
                case 5:
                {
                    return Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                }
                case 6:
                {
                    return Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                }
                case 7:
                {
                    return Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                }
                case 8:
                {
                    return Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                }
            }

            _System.Diagnostics.Debug.Assert(false);
            throw new Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        #endregion
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
    public abstract class ServerDisp_ : Ice.ObjectImpl, Server
    {
        #region Slice operations

        public abstract void StartGame(Online.ClientPrx[] clientList, Ice.Current current = null);

        #endregion

        #region Slice type-related members

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::Online::Server"
        };

        public override bool ice_isA(string s, Ice.Current current = null)
        {
            return _System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids(Ice.Current current = null)
        {
            return _ids;
        }

        public override string ice_id(Ice.Current current = null)
        {
            return _ids[1];
        }

        public static new string ice_staticId()
        {
            return _ids[1];
        }

        #endregion

        #region Operation dispatch

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static _System.Threading.Tasks.Task<Ice.OutputStream>
        iceD_StartGame(Server obj, IceInternal.Incoming inS, Ice.Current current)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            Online.ClientPrx[] iceP_clientList;
            iceP_clientList = Online.ClientListHelper.read(istr);
            inS.endReadParams();
            obj.StartGame(iceP_clientList, current);
            return inS.setResult(inS.writeEmptyParams());
        }

        private static readonly string[] _all =
        {
            "StartGame",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping"
        };

        public override _System.Threading.Tasks.Task<Ice.OutputStream>
        iceDispatch(IceInternal.Incoming inS, Ice.Current current)
        {
            int pos = _System.Array.BinarySearch(_all, current.operation, IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return iceD_StartGame(this, inS, current);
                }
                case 1:
                {
                    return Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                }
                case 2:
                {
                    return Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                }
                case 3:
                {
                    return Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                }
                case 4:
                {
                    return Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                }
            }

            _System.Diagnostics.Debug.Assert(false);
            throw new Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        #endregion
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
    public abstract class PlayerDisp_ : Ice.ObjectImpl, Player
    {
        #region Slice operations

        public abstract Online.PlayerStats GetStats(Ice.Current current = null);

        public abstract bool JoinGame(Online.ClientPrx client, Online.GamePrx game, Ice.Current current = null);

        public abstract Online.GameHostPrx CreateGame(Online.ServerPrx server, Ice.Current current = null);

        public abstract void LeaveGame(Ice.Current current = null);

        public abstract void LogOut(Ice.Current current = null);

        #endregion

        #region Slice type-related members

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::Online::Player"
        };

        public override bool ice_isA(string s, Ice.Current current = null)
        {
            return _System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids(Ice.Current current = null)
        {
            return _ids;
        }

        public override string ice_id(Ice.Current current = null)
        {
            return _ids[1];
        }

        public static new string ice_staticId()
        {
            return _ids[1];
        }

        #endregion

        #region Operation dispatch

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static _System.Threading.Tasks.Task<Ice.OutputStream>
        iceD_GetStats(Player obj, IceInternal.Incoming inS, Ice.Current current)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            var ret = obj.GetStats(current);
            var ostr = inS.startWriteParams();
            Online.PlayerStats.ice_write(ostr, ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static _System.Threading.Tasks.Task<Ice.OutputStream>
        iceD_JoinGame(Player obj, IceInternal.Incoming inS, Ice.Current current)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            Online.ClientPrx iceP_client;
            Online.GamePrx iceP_game;
            iceP_client = Online.ClientPrxHelper.read(istr);
            iceP_game = Online.GamePrxHelper.read(istr);
            inS.endReadParams();
            var ret = obj.JoinGame(iceP_client, iceP_game, current);
            var ostr = inS.startWriteParams();
            ostr.writeBool(ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static _System.Threading.Tasks.Task<Ice.OutputStream>
        iceD_CreateGame(Player obj, IceInternal.Incoming inS, Ice.Current current)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            Online.ServerPrx iceP_server;
            iceP_server = Online.ServerPrxHelper.read(istr);
            inS.endReadParams();
            var ret = obj.CreateGame(iceP_server, current);
            var ostr = inS.startWriteParams();
            Online.GameHostPrxHelper.write(ostr, ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static _System.Threading.Tasks.Task<Ice.OutputStream>
        iceD_LeaveGame(Player obj, IceInternal.Incoming inS, Ice.Current current)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            obj.LeaveGame(current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static _System.Threading.Tasks.Task<Ice.OutputStream>
        iceD_LogOut(Player obj, IceInternal.Incoming inS, Ice.Current current)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            obj.LogOut(current);
            return inS.setResult(inS.writeEmptyParams());
        }

        private static readonly string[] _all =
        {
            "CreateGame",
            "GetStats",
            "JoinGame",
            "LeaveGame",
            "LogOut",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping"
        };

        public override _System.Threading.Tasks.Task<Ice.OutputStream>
        iceDispatch(IceInternal.Incoming inS, Ice.Current current)
        {
            int pos = _System.Array.BinarySearch(_all, current.operation, IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return iceD_CreateGame(this, inS, current);
                }
                case 1:
                {
                    return iceD_GetStats(this, inS, current);
                }
                case 2:
                {
                    return iceD_JoinGame(this, inS, current);
                }
                case 3:
                {
                    return iceD_LeaveGame(this, inS, current);
                }
                case 4:
                {
                    return iceD_LogOut(this, inS, current);
                }
                case 5:
                {
                    return Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                }
                case 6:
                {
                    return Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                }
                case 7:
                {
                    return Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                }
                case 8:
                {
                    return Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                }
            }

            _System.Diagnostics.Debug.Assert(false);
            throw new Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        #endregion
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
    public abstract class LobbyListenerDisp_ : Ice.ObjectImpl, LobbyListener
    {
        #region Slice operations

        public abstract void Update(Online.GamePrx[] list, Ice.Current current = null);

        public abstract bool Ping(Ice.Current current = null);

        #endregion

        #region Slice type-related members

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::Online::LobbyListener"
        };

        public override bool ice_isA(string s, Ice.Current current = null)
        {
            return _System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids(Ice.Current current = null)
        {
            return _ids;
        }

        public override string ice_id(Ice.Current current = null)
        {
            return _ids[1];
        }

        public static new string ice_staticId()
        {
            return _ids[1];
        }

        #endregion

        #region Operation dispatch

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static _System.Threading.Tasks.Task<Ice.OutputStream>
        iceD_Update(LobbyListener obj, IceInternal.Incoming inS, Ice.Current current)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            Online.GamePrx[] iceP_list;
            iceP_list = Online.GameListHelper.read(istr);
            inS.endReadParams();
            obj.Update(iceP_list, current);
            return inS.setResult(inS.writeEmptyParams());
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static _System.Threading.Tasks.Task<Ice.OutputStream>
        iceD_Ping(LobbyListener obj, IceInternal.Incoming inS, Ice.Current current)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, current.mode);
            inS.readEmptyParams();
            var ret = obj.Ping(current);
            var ostr = inS.startWriteParams();
            ostr.writeBool(ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        private static readonly string[] _all =
        {
            "Ping",
            "Update",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping"
        };

        public override _System.Threading.Tasks.Task<Ice.OutputStream>
        iceDispatch(IceInternal.Incoming inS, Ice.Current current)
        {
            int pos = _System.Array.BinarySearch(_all, current.operation, IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return iceD_Ping(this, inS, current);
                }
                case 1:
                {
                    return iceD_Update(this, inS, current);
                }
                case 2:
                {
                    return Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                }
                case 3:
                {
                    return Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                }
                case 4:
                {
                    return Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                }
                case 5:
                {
                    return Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                }
            }

            _System.Diagnostics.Debug.Assert(false);
            throw new Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        #endregion
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
    public abstract class PlayerRegisterDisp_ : Ice.ObjectImpl, PlayerRegister
    {
        #region Slice operations

        public abstract Online.PlayerPrx Login(string username, string password, Ice.Current current = null);

        public abstract Online.PlayerPrx CreateNew(string username, string password, Ice.Current current = null);

        #endregion

        #region Slice type-related members

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::Online::PlayerRegister"
        };

        public override bool ice_isA(string s, Ice.Current current = null)
        {
            return _System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids(Ice.Current current = null)
        {
            return _ids;
        }

        public override string ice_id(Ice.Current current = null)
        {
            return _ids[1];
        }

        public static new string ice_staticId()
        {
            return _ids[1];
        }

        #endregion

        #region Operation dispatch

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static _System.Threading.Tasks.Task<Ice.OutputStream>
        iceD_Login(PlayerRegister obj, IceInternal.Incoming inS, Ice.Current current)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            string iceP_username;
            string iceP_password;
            iceP_username = istr.readString();
            iceP_password = istr.readString();
            inS.endReadParams();
            var ret = obj.Login(iceP_username, iceP_password, current);
            var ostr = inS.startWriteParams();
            Online.PlayerPrxHelper.write(ostr, ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static _System.Threading.Tasks.Task<Ice.OutputStream>
        iceD_CreateNew(PlayerRegister obj, IceInternal.Incoming inS, Ice.Current current)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            string iceP_username;
            string iceP_password;
            iceP_username = istr.readString();
            iceP_password = istr.readString();
            inS.endReadParams();
            var ret = obj.CreateNew(iceP_username, iceP_password, current);
            var ostr = inS.startWriteParams();
            Online.PlayerPrxHelper.write(ostr, ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        private static readonly string[] _all =
        {
            "CreateNew",
            "Login",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping"
        };

        public override _System.Threading.Tasks.Task<Ice.OutputStream>
        iceDispatch(IceInternal.Incoming inS, Ice.Current current)
        {
            int pos = _System.Array.BinarySearch(_all, current.operation, IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return iceD_CreateNew(this, inS, current);
                }
                case 1:
                {
                    return iceD_Login(this, inS, current);
                }
                case 2:
                {
                    return Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                }
                case 3:
                {
                    return Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                }
                case 4:
                {
                    return Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                }
                case 5:
                {
                    return Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                }
            }

            _System.Diagnostics.Debug.Assert(false);
            throw new Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        #endregion
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
    public abstract class GameRegisterDisp_ : Ice.ObjectImpl, GameRegister
    {
        #region Slice operations

        public abstract Online.PlayerRegisterPrx Connect(Online.LobbyListenerPrx listener, Ice.Current current = null);

        #endregion

        #region Slice type-related members

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::Online::GameRegister"
        };

        public override bool ice_isA(string s, Ice.Current current = null)
        {
            return _System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids(Ice.Current current = null)
        {
            return _ids;
        }

        public override string ice_id(Ice.Current current = null)
        {
            return _ids[1];
        }

        public static new string ice_staticId()
        {
            return _ids[1];
        }

        #endregion

        #region Operation dispatch

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static _System.Threading.Tasks.Task<Ice.OutputStream>
        iceD_Connect(GameRegister obj, IceInternal.Incoming inS, Ice.Current current)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            Online.LobbyListenerPrx iceP_listener;
            iceP_listener = Online.LobbyListenerPrxHelper.read(istr);
            inS.endReadParams();
            var ret = obj.Connect(iceP_listener, current);
            var ostr = inS.startWriteParams();
            Online.PlayerRegisterPrxHelper.write(ostr, ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        private static readonly string[] _all =
        {
            "Connect",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping"
        };

        public override _System.Threading.Tasks.Task<Ice.OutputStream>
        iceDispatch(IceInternal.Incoming inS, Ice.Current current)
        {
            int pos = _System.Array.BinarySearch(_all, current.operation, IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return iceD_Connect(this, inS, current);
                }
                case 1:
                {
                    return Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                }
                case 2:
                {
                    return Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                }
                case 3:
                {
                    return Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                }
                case 4:
                {
                    return Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                }
            }

            _System.Diagnostics.Debug.Assert(false);
            throw new Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        #endregion
    }
}
